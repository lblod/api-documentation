{
    "project": {
        "name": "editor-documentation",
        "description": "LBLOD editor Documentation pages",
        "version": "0.0.0.2bbb5b15"
    },
    "files": {
        "node_modules/@lblod/ember-contenteditable-editor/addon/components/content-editable.js": {
            "name": "node_modules/@lblod/ember-contenteditable-editor/addon/components/content-editable.js",
            "modules": {
                "contenteditable-editor": 1
            },
            "classes": {
                "ContentEditableComponent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "node_modules/@lblod/ember-contenteditable-editor/addon/utils/editor/operation.js": {
            "name": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/editor/operation.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "node_modules/@lblod/ember-contenteditable-editor/addon/utils/editor/select.js": {
            "name": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/editor/select.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "node_modules/@lblod/ember-contenteditable-editor/addon/utils/editor/update.js": {
            "name": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/editor/update.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "node_modules/@lblod/ember-contenteditable-editor/addon/utils/arrow-handler.js": {
            "name": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/arrow-handler.js",
            "modules": {},
            "classes": {
                "ArrowHandler": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "node_modules/@lblod/ember-contenteditable-editor/addon/utils/backspace-handler.js": {
            "name": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/backspace-handler.js",
            "modules": {},
            "classes": {
                "BackspaceHandler": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "node_modules/@lblod/ember-contenteditable-editor/addon/utils/capped-history.js": {
            "name": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/capped-history.js",
            "modules": {},
            "classes": {
                "CappedHistory": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "node_modules/@lblod/ember-contenteditable-editor/addon/utils/dom-helpers.js": {
            "name": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/dom-helpers.js",
            "modules": {},
            "classes": {
                "DomHelpers": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "node_modules/@lblod/ember-contenteditable-editor/addon/utils/editor-property.js": {
            "name": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/editor-property.js",
            "modules": {},
            "classes": {
                "EditorProperty": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "node_modules/@lblod/ember-contenteditable-editor/addon/utils/editor.js": {
            "name": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/editor.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "node_modules/@lblod/ember-contenteditable-editor/addon/utils/emphasis-markdown-handler.js": {
            "name": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/emphasis-markdown-handler.js",
            "modules": {},
            "classes": {
                "EmphasisMarkdownHandler": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "node_modules/@lblod/ember-contenteditable-editor/addon/utils/enter-handler.js": {
            "name": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/enter-handler.js",
            "modules": {},
            "classes": {
                "EnterHandler": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "node_modules/@lblod/ember-contenteditable-editor/addon/utils/flat-map.js": {
            "name": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/flat-map.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "node_modules/@lblod/ember-contenteditable-editor/addon/utils/forgiving-action.js": {
            "name": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/forgiving-action.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "node_modules/@lblod/ember-contenteditable-editor/addon/utils/handler-response.js": {
            "name": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/handler-response.js",
            "modules": {},
            "classes": {
                "HandlerResponse": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "node_modules/@lblod/ember-contenteditable-editor/addon/utils/header-markdown-handler.js": {
            "name": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/header-markdown-handler.js",
            "modules": {},
            "classes": {
                "HeaderMarkdownHandler": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "node_modules/@lblod/ember-contenteditable-editor/addon/utils/ignore-modifiers-handler.js": {
            "name": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/ignore-modifiers-handler.js",
            "modules": {},
            "classes": {
                "IgnoreModifiersHandler": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "node_modules/@lblod/ember-contenteditable-editor/addon/utils/list-helpers.js": {
            "name": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/list-helpers.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "node_modules/@lblod/ember-contenteditable-editor/addon/utils/list-insertion-markdown-handler.js": {
            "name": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/list-insertion-markdown-handler.js",
            "modules": {},
            "classes": {
                "ListInsertionMarkdownHandler": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "node_modules/@lblod/ember-contenteditable-editor/addon/utils/next-text-node.js": {
            "name": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/next-text-node.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "node_modules/@lblod/ember-contenteditable-editor/addon/utils/pernet-api.js": {
            "name": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/pernet-api.js",
            "modules": {
                "pernetApi": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "node_modules/@lblod/ember-contenteditable-editor/addon/utils/previous-text-node.js": {
            "name": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/previous-text-node.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "node_modules/@lblod/ember-contenteditable-editor/addon/utils/property-helpers.js": {
            "name": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/property-helpers.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "node_modules/@lblod/ember-contenteditable-editor/addon/utils/raw-editor.js": {
            "name": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/raw-editor.js",
            "modules": {},
            "classes": {
                "RawEditor": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "node_modules/@lblod/ember-contenteditable-editor/addon/utils/replace-text-with-html.js": {
            "name": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/replace-text-with-html.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "node_modules/@lblod/ember-contenteditable-editor/addon/utils/text-input-handler.js": {
            "name": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/text-input-handler.js",
            "modules": {},
            "classes": {
                "TextInputHandler": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "node_modules/@lblod/ember-rdfa-editor-plugin-system-dispatcher/app/services/rdfa-editor-dispatcher.js": {
            "name": "node_modules/@lblod/ember-rdfa-editor-plugin-system-dispatcher/app/services/rdfa-editor-dispatcher.js",
            "modules": {},
            "classes": {
                "RdfaEditorDispatcher": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "node_modules/@lblod/ember-rdfa-editor/addon/components/document-structure.js": {
            "name": "node_modules/@lblod/ember-rdfa-editor/addon/components/document-structure.js",
            "modules": {},
            "classes": {
                "DocumentStructureComponent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "node_modules/@lblod/ember-rdfa-editor/addon/components/editor-suggested-hints.js": {
            "name": "node_modules/@lblod/ember-rdfa-editor/addon/components/editor-suggested-hints.js",
            "modules": {},
            "classes": {
                "RdfaEditorSuggestedHintsComponent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "node_modules/@lblod/ember-rdfa-editor/addon/components/editor-toolbar.js": {
            "name": "node_modules/@lblod/ember-rdfa-editor/addon/components/editor-toolbar.js",
            "modules": {},
            "classes": {
                "RdfaEditorToolbarComponent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "node_modules/@lblod/ember-rdfa-editor/addon/components/hints-registry-debugger.js": {
            "name": "node_modules/@lblod/ember-rdfa-editor/addon/components/hints-registry-debugger.js",
            "modules": {},
            "classes": {
                "HintsRegistryDebugger": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "node_modules/@lblod/ember-rdfa-editor/addon/components/load-monitor.js": {
            "name": "node_modules/@lblod/ember-rdfa-editor/addon/components/load-monitor.js",
            "modules": {},
            "classes": {
                "RdfaEditorLoadMonitor": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "node_modules/@lblod/ember-rdfa-editor/addon/components/rdfa-context-debugger.js": {
            "name": "node_modules/@lblod/ember-rdfa-editor/addon/components/rdfa-context-debugger.js",
            "modules": {},
            "classes": {
                "RdfaContextDebugger": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "node_modules/@lblod/ember-rdfa-editor/addon/components/rdfa-editor-debugger.js": {
            "name": "node_modules/@lblod/ember-rdfa-editor/addon/components/rdfa-editor-debugger.js",
            "modules": {},
            "classes": {
                "RdfaEditorDebugger": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "node_modules/@lblod/ember-rdfa-editor/addon/components/rdfa-editor.js": {
            "name": "node_modules/@lblod/ember-rdfa-editor/addon/components/rdfa-editor.js",
            "modules": {
                "rdfa-editor": 1
            },
            "classes": {
                "RdfaEditorComponent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "node_modules/@lblod/ember-rdfa-editor/addon/utils/bold-property.js": {
            "name": "node_modules/@lblod/ember-rdfa-editor/addon/utils/bold-property.js",
            "modules": {},
            "classes": {
                "BoldProperty": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "node_modules/@lblod/ember-rdfa-editor/addon/utils/event-processor.js": {
            "name": "node_modules/@lblod/ember-rdfa-editor/addon/utils/event-processor.js",
            "modules": {},
            "classes": {
                "EventProcessor": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "node_modules/@lblod/ember-rdfa-editor/addon/utils/forgiving-action.js": {
            "name": "node_modules/@lblod/ember-rdfa-editor/addon/utils/forgiving-action.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "node_modules/@lblod/ember-rdfa-editor/addon/utils/hints-registry.js": {
            "name": "node_modules/@lblod/ember-rdfa-editor/addon/utils/hints-registry.js",
            "modules": {},
            "classes": {
                "HintsRegistry": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "node_modules/@lblod/ember-rdfa-editor/addon/utils/italic-property.js": {
            "name": "node_modules/@lblod/ember-rdfa-editor/addon/utils/italic-property.js",
            "modules": {},
            "classes": {
                "ItalicProperty": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "node_modules/@lblod/ember-rdfa-editor/addon/utils/rdfa-backspace-handler.js": {
            "name": "node_modules/@lblod/ember-rdfa-editor/addon/utils/rdfa-backspace-handler.js",
            "modules": {},
            "classes": {
                "RdfaBackspaceHandler": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "node_modules/@lblod/ember-rdfa-editor/addon/utils/rdfa-context-scanner.js": {
            "name": "node_modules/@lblod/ember-rdfa-editor/addon/utils/rdfa-context-scanner.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "node_modules/@lblod/ember-rdfa-editor/addon/utils/rdfa-rich-node-helpers.js": {
            "name": "node_modules/@lblod/ember-rdfa-editor/addon/utils/rdfa-rich-node-helpers.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "node_modules/@lblod/ember-rdfa-editor/addon/utils/scoped-method.js": {
            "name": "node_modules/@lblod/ember-rdfa-editor/addon/utils/scoped-method.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "node_modules/@lblod/ember-rdfa-editor/addon/utils/text-input-data-flagged-remove-handler.js": {
            "name": "node_modules/@lblod/ember-rdfa-editor/addon/utils/text-input-data-flagged-remove-handler.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "node_modules/@lblod/ember-rdfa-editor/addon/utils/underline-property.js": {
            "name": "node_modules/@lblod/ember-rdfa-editor/addon/utils/underline-property.js",
            "modules": {},
            "classes": {
                "UnderlineProperty": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "node_modules/@lblod/marawa/test/helpers.js": {
            "name": "node_modules/@lblod/marawa/test/helpers.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "node_modules/@lblod/marawa/dom-helpers.js": {
            "name": "node_modules/@lblod/marawa/dom-helpers.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "node_modules/@lblod/marawa/node-walker.js": {
            "name": "node_modules/@lblod/marawa/node-walker.js",
            "modules": {
                "editor-core": 1
            },
            "classes": {
                "NodeWalker": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "node_modules/@lblod/marawa/rdfa-block.js": {
            "name": "node_modules/@lblod/marawa/rdfa-block.js",
            "modules": {},
            "classes": {
                "RdfaBlock": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "node_modules/@lblod/marawa/rdfa-context-scanner.js": {
            "name": "node_modules/@lblod/marawa/rdfa-context-scanner.js",
            "modules": {},
            "classes": {
                "RdfaContextScanner": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "node_modules/@lblod/marawa/rdfa-helpers.js": {
            "name": "node_modules/@lblod/marawa/rdfa-helpers.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "node_modules/@lblod/marawa/rich-node.js": {
            "name": "node_modules/@lblod/marawa/rich-node.js",
            "modules": {},
            "classes": {
                "RichNode": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "contenteditable-editor": {
            "name": "contenteditable-editor",
            "submodules": {},
            "elements": {},
            "classes": {
                "ContentEditableComponent": 1,
                "ArrowHandler": 1,
                "BackspaceHandler": 1,
                "CappedHistory": 1,
                "DomHelpers": 1,
                "EditorProperty": 1,
                "EmphasisMarkdownHandler": 1,
                "EnterHandler": 1,
                "HandlerResponse": 1,
                "HeaderMarkdownHandler": 1,
                "IgnoreModifiersHandler": 1,
                "ListInsertionMarkdownHandler": 1,
                "RawEditor": 1,
                "TextInputHandler": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/text-input-handler.js",
            "line": 7,
            "description": "content-editable is the core of {{#crossLinkModule \"rdfa-editor\"}}rdfa-editor{{/crossLinkModule}}.\nIt handles input events, provides an api for interaction with the document and provides a internal document representation.\n\nrdfa-editor embeds the {{#crossLink \"ContentEditableCompoment\"}}{{/crossLink}} and interacts with the document through the {{#crossLink \"RawEditor\"}}{{/crossLink}} interface.\n\ninput is handled by input handlers such as the {{#crossLink \"TextInputHandler\"}}{{/crossLink}} and {{crossLink \"EnterHandler\"}}{{/crossLink}}.",
            "itemtype": "main",
            "extends": "Component",
            "is_constructor": 1
        },
        "pernetApi": {
            "name": "pernetApi",
            "submodules": {},
            "elements": {},
            "classes": {},
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/pernet-api.js",
            "line": 4
        },
        "editor-core": {
            "name": "editor-core",
            "submodules": {},
            "elements": {},
            "classes": {
                "RdfaEditorDispatcher": 1,
                "RdfaContextScanner": 1,
                "NodeWalker": 1,
                "RdfaBlock": 1,
                "RichNode": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "node_modules/@lblod/marawa/rich-node.js",
            "line": 15,
            "description": "DOM tree walker producing RichNodes",
            "extends": "Service",
            "is_constructor": 1
        },
        "rdfa-editor": {
            "name": "rdfa-editor",
            "submodules": {},
            "elements": {},
            "classes": {
                "DocumentStructureComponent": 1,
                "RdfaEditorSuggestedHintsComponent": 1,
                "RdfaEditorToolbarComponent": 1,
                "HintsRegistryDebugger": 1,
                "RdfaEditorLoadMonitor": 1,
                "RdfaContextDebugger": 1,
                "RdfaEditorDebugger": 1,
                "RdfaEditorComponent": 1,
                "BoldProperty": 1,
                "EventProcessor": 1,
                "HintsRegistry": 1,
                "ItalicProperty": 1,
                "RdfaBackspaceHandler": 1,
                "UnderlineProperty": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/utils/underline-property.js",
            "line": 3,
            "description": "RDFa editor\n\nThis module contains all classes and components provided by the @lblod/ember-rdfa-editor addon.\nThe main entrypoint is the {{#crossLink \"RdfaEditorComponent\"}}{{/crossLink}}.",
            "extends": "Component",
            "construct": "",
            "itemtype": "main",
            "is_constructor": 1,
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "context",
                    "description": "context where the potential action should be defined",
                    "type": "Object"
                },
                {
                    "name": "name",
                    "description": "The name of the action",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the function assiociated with the action, or function returning nothing",
                "type": "Function"
            }
        }
    },
    "classes": {
        "ContentEditableComponent": {
            "name": "ContentEditableComponent",
            "shortname": "ContentEditableComponent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "contenteditable-editor",
            "namespace": "",
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/components/content-editable.js",
            "line": 34,
            "description": "Content editable editor component"
        },
        "ArrowHandler": {
            "name": "ArrowHandler",
            "shortname": "ArrowHandler",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "contenteditable-editor",
            "namespace": "",
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/arrow-handler.js",
            "line": 8,
            "description": "Arrow Handler, a event handler to handle arrow keys.\n__Note__: Currently only left and right arrow keys are supported"
        },
        "BackspaceHandler": {
            "name": "BackspaceHandler",
            "shortname": "BackspaceHandler",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "contenteditable-editor",
            "namespace": "",
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/backspace-handler.js",
            "line": 16,
            "description": "Backspace Handler, a event handler to handle the generic backspace case"
        },
        "CappedHistory": {
            "name": "CappedHistory",
            "shortname": "CappedHistory",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "contenteditable-editor",
            "namespace": "",
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/capped-history.js",
            "line": 3,
            "description": "a simple capped collection to store document snap shots"
        },
        "DomHelpers": {
            "name": "DomHelpers",
            "shortname": "DomHelpers",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "contenteditable-editor",
            "namespace": "",
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/dom-helpers.js",
            "line": 2,
            "description": "Fake class to list helper functions\nthese functions can be included using\n\n`import { function } from @lblod/ember-contenteditable/utils/dom-helpers;`"
        },
        "EditorProperty": {
            "name": "EditorProperty",
            "shortname": "EditorProperty",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "contenteditable-editor",
            "namespace": "",
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/editor-property.js",
            "line": 7,
            "description": "This is an class providing the interface and basic implementation of a \"transient property\".\nTransient properties introduce the concept of a property that is\nconsidered to be active in a position in the tree based on any of its\nparent nodes, and which can be split/merged at will.  The transient\nproperty solution contains both logical way of working, as well as the\ntooling around it to make it feasible to use.\nCreate an instance of this class to define simple properties or extend it for more advanced ones."
        },
        "EmphasisMarkdownHandler": {
            "name": "EmphasisMarkdownHandler",
            "shortname": "EmphasisMarkdownHandler",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "contenteditable-editor",
            "namespace": "",
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/emphasis-markdown-handler.js",
            "line": 20,
            "description": "handles emphasis markdown"
        },
        "EnterHandler": {
            "name": "EnterHandler",
            "shortname": "EnterHandler",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "contenteditable-editor",
            "namespace": "",
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/enter-handler.js",
            "line": 15,
            "description": "Enter Handler, a event handler to handle the generic enter case"
        },
        "HandlerResponse": {
            "name": "HandlerResponse",
            "shortname": "HandlerResponse",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "contenteditable-editor",
            "namespace": "",
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/handler-response.js",
            "line": 2,
            "description": "response object for event handlers"
        },
        "HeaderMarkdownHandler": {
            "name": "HeaderMarkdownHandler",
            "shortname": "HeaderMarkdownHandler",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "contenteditable-editor",
            "namespace": "",
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/header-markdown-handler.js",
            "line": 12,
            "description": "handles header markdown i.e. ## title + hitting 'enter'"
        },
        "IgnoreModifiersHandler": {
            "name": "IgnoreModifiersHandler",
            "shortname": "IgnoreModifiersHandler",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "contenteditable-editor",
            "namespace": "",
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/ignore-modifiers-handler.js",
            "line": 4,
            "description": "Simple handler which allows us to ignore modifiers which yield a\nkeydown event, but don't have any meaning.",
            "is_constructor": 1
        },
        "ListInsertionMarkdownHandler": {
            "name": "ListInsertionMarkdownHandler",
            "shortname": "ListInsertionMarkdownHandler",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "contenteditable-editor",
            "namespace": "",
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/list-insertion-markdown-handler.js",
            "line": 16,
            "description": "handles new creation markdown"
        },
        "RawEditor": {
            "name": "RawEditor",
            "shortname": "RawEditor",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "contenteditable-editor",
            "namespace": "",
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/raw-editor.js",
            "line": 49,
            "description": "raw contenteditable editor, a utility class that shields editor internals from consuming applications."
        },
        "TextInputHandler": {
            "name": "TextInputHandler",
            "shortname": "TextInputHandler",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "contenteditable-editor",
            "namespace": "",
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/text-input-handler.js",
            "line": 7,
            "description": "Text Input Handler, a event handler to handle text input"
        },
        "RdfaEditorDispatcher": {
            "name": "RdfaEditorDispatcher",
            "shortname": "RdfaEditorDispatcher",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "editor-core",
            "namespace": "",
            "file": "node_modules/@lblod/ember-rdfa-editor-plugin-system-dispatcher/app/services/rdfa-editor-dispatcher.js",
            "line": 99,
            "description": "RDFa Editor system dispatcher that dispatches editor events to the configured plugins"
        },
        "DocumentStructureComponent": {
            "name": "DocumentStructureComponent",
            "shortname": "DocumentStructureComponent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "rdfa-editor",
            "namespace": "",
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/components/document-structure.js",
            "line": 39,
            "description": "Document structure component"
        },
        "RdfaEditorSuggestedHintsComponent": {
            "name": "RdfaEditorSuggestedHintsComponent",
            "shortname": "RdfaEditorSuggestedHintsComponent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "rdfa-editor",
            "namespace": "",
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/components/editor-suggested-hints.js",
            "line": 4
        },
        "RdfaEditorToolbarComponent": {
            "name": "RdfaEditorToolbarComponent",
            "shortname": "RdfaEditorToolbarComponent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "rdfa-editor",
            "namespace": "",
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/components/editor-toolbar.js",
            "line": 8,
            "description": "RDFa editor toolbar component"
        },
        "HintsRegistryDebugger": {
            "name": "HintsRegistryDebugger",
            "shortname": "HintsRegistryDebugger",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "rdfa-editor",
            "namespace": "",
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/components/hints-registry-debugger.js",
            "line": 5,
            "description": "Debugger component for the {{#crossLink \"HintsRegistry\"}}Hints Registry{{/crossLink}}"
        },
        "RdfaEditorLoadMonitor": {
            "name": "RdfaEditorLoadMonitor",
            "shortname": "RdfaEditorLoadMonitor",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "rdfa-editor",
            "namespace": "",
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/components/load-monitor.js",
            "line": 9,
            "description": "Load monitor"
        },
        "RdfaContextDebugger": {
            "name": "RdfaContextDebugger",
            "shortname": "RdfaContextDebugger",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "rdfa-editor",
            "namespace": "",
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/components/rdfa-context-debugger.js",
            "line": 7,
            "description": "Debugger component for the RDFa context of DOM nodes"
        },
        "RdfaEditorDebugger": {
            "name": "RdfaEditorDebugger",
            "shortname": "RdfaEditorDebugger",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "rdfa-editor",
            "namespace": "",
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/components/rdfa-editor-debugger.js",
            "line": 6,
            "description": "Debugger component for the RDFa Editor"
        },
        "RdfaEditorComponent": {
            "name": "RdfaEditorComponent",
            "shortname": "RdfaEditorComponent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "rdfa-editor",
            "namespace": "",
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/components/rdfa-editor.js",
            "line": 25,
            "description": "RDFa editor component\n\nThis component wraps around a {{#crossLink \"ContentEditableComponent\"}}{{/crossLink}}\nand provides an architecture to interact with the document through plugins.\n{{#crossLinkModule \"rdfa-editor\"}}rdfa-editor{{/crossLinkModule}}."
        },
        "BoldProperty": {
            "name": "BoldProperty",
            "shortname": "BoldProperty",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "rdfa-editor",
            "namespace": "",
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/utils/bold-property.js",
            "line": 3,
            "description": "Editor property that represents bold text."
        },
        "EventProcessor": {
            "name": "EventProcessor",
            "shortname": "EventProcessor",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "rdfa-editor",
            "namespace": "",
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/utils/event-processor.js",
            "line": 9,
            "description": "Event processor orchastrating the hinting based on incoming editor events"
        },
        "HintsRegistry": {
            "name": "HintsRegistry",
            "shortname": "HintsRegistry",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "rdfa-editor",
            "namespace": "",
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/utils/hints-registry.js",
            "line": 6,
            "description": "Bookkeeping of the editor hints"
        },
        "ItalicProperty": {
            "name": "ItalicProperty",
            "shortname": "ItalicProperty",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "rdfa-editor",
            "namespace": "",
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/utils/italic-property.js",
            "line": 3,
            "description": "Editor property that represents italic text."
        },
        "RdfaBackspaceHandler": {
            "name": "RdfaBackspaceHandler",
            "shortname": "RdfaBackspaceHandler",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "rdfa-editor",
            "namespace": "",
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/utils/rdfa-backspace-handler.js",
            "line": 6,
            "description": "Rdfa Backspace Handler, a event handler to handle backspaces while taking rdfa into account"
        },
        "RdfaContextScanner": {
            "name": "RdfaContextScanner",
            "shortname": "RdfaContextScanner",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "editor-core",
            "namespace": "",
            "file": "node_modules/@lblod/marawa/rdfa-context-scanner.js",
            "line": 34,
            "description": "Scanner of the RDFa context of DOM nodes"
        },
        "UnderlineProperty": {
            "name": "UnderlineProperty",
            "shortname": "UnderlineProperty",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "rdfa-editor",
            "namespace": "",
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/utils/underline-property.js",
            "line": 3,
            "description": "Editor property that represents underlined text."
        },
        "NodeWalker": {
            "name": "NodeWalker",
            "shortname": "NodeWalker",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "editor-core",
            "namespace": "",
            "file": "node_modules/@lblod/marawa/node-walker.js",
            "line": 52,
            "description": "DOM tree walker producing RichNodes"
        },
        "RdfaBlock": {
            "name": "RdfaBlock",
            "shortname": "RdfaBlock",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "editor-core",
            "namespace": "",
            "file": "node_modules/@lblod/marawa/rdfa-block.js",
            "line": 13,
            "description": "Represents a logical block, a combination of one or more RichNodes,\nthat share the same semantic meaning (in terms of RDFa as well as in terms of display).\n\nAn RDFa block has the following properties:\n- start, end, region: boundaries of the RDFa block\n- text: plain text of the region\n- richNodes: array of leaf richNodes that are combined in this RDFa block\n- semanticNode: deepest (ancestor) rich node that contains the context of this block\n- context: array of triples from the top to the semantic node\n- isRdfaBlock: whether this block can be combined with other blocks (mainly for internal usage).\n               RDFa blocks cannot be combined if isRdfaBlock == true"
        },
        "RichNode": {
            "name": "RichNode",
            "shortname": "RichNode",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "editor-core",
            "namespace": "",
            "file": "node_modules/@lblod/marawa/rich-node.js",
            "line": 15,
            "description": "Represents an enriched DOM node.\n\nThe DOM node is available in the 'domNode' property."
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/components/content-editable.js",
            "line": 44,
            "description": "latest cursor position in the contenteditable, it is aliased to the rawEditor.currentSelection",
            "itemtype": "property",
            "name": "currentSelection",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "ContentEditableComponent",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/components/content-editable.js",
            "line": 54,
            "description": "latest text content in the contenteditable, it is aliased to the rawEditor.currentTextContent",
            "itemtype": "property",
            "name": "currentTextContent",
            "type": "String",
            "access": "private",
            "tagname": "",
            "class": "ContentEditableComponent",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/components/content-editable.js",
            "line": 65,
            "description": "element of the component, it is aliased to the rawEditor.rootNode",
            "itemtype": "property",
            "name": "element",
            "type": "DOMElement",
            "access": "private",
            "tagname": "",
            "class": "ContentEditableComponent",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/components/content-editable.js",
            "line": 75,
            "description": "string representation of editable",
            "itemtype": "property",
            "name": "isEditable",
            "type": "string",
            "access": "private",
            "tagname": "",
            "class": "ContentEditableComponent",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/components/content-editable.js",
            "line": 86,
            "description": "richNode is the rich representation of the component element,\nit is aliased to the rawEditor.richNode",
            "itemtype": "property",
            "name": "richNode",
            "type": "RichNode",
            "access": "private",
            "tagname": "",
            "class": "ContentEditableComponent",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/components/content-editable.js",
            "line": 96,
            "itemtype": "property",
            "name": "rawEditor",
            "type": "RawEditor",
            "class": "ContentEditableComponent",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/components/content-editable.js",
            "line": 103,
            "description": "components present in the editor",
            "itemtype": "property",
            "name": "components",
            "type": "{Object}",
            "access": "public",
            "tagname": "",
            "class": "ContentEditableComponent",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/components/content-editable.js",
            "line": 111,
            "description": "ordered set of input handlers",
            "itemtype": "property",
            "name": "eventHandlers",
            "type": "Array",
            "access": "public",
            "tagname": "",
            "class": "ContentEditableComponent",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/components/content-editable.js",
            "line": 119,
            "description": "default input handlers",
            "itemtype": "property",
            "name": "defaultHandlers",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "ContentEditableComponent",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/components/content-editable.js",
            "line": 127,
            "description": "external input handlersg",
            "itemtype": "property",
            "name": "externalHandlers",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "ContentEditableComponent",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/components/content-editable.js",
            "line": 134,
            "is_constructor": 1,
            "class": "ContentEditableComponent",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/components/content-editable.js",
            "line": 176,
            "description": "specify whether the editor should autofocus the contenteditable field",
            "itemtype": "property",
            "name": "focused",
            "type": "boolean",
            "default": "false",
            "access": "public",
            "tagname": "",
            "class": "ContentEditableComponent",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/components/content-editable.js",
            "line": 187,
            "description": "specify whether the editor should be contenteditable",
            "itemtype": "property",
            "name": "editable",
            "type": "boolean",
            "default": "true",
            "access": "public",
            "tagname": "",
            "class": "ContentEditableComponent",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/components/content-editable.js",
            "line": 198,
            "description": "specify whether yielded value should escape html syntax",
            "itemtype": "property",
            "name": "yieldHTML",
            "type": "boolean",
            "default": "true",
            "access": "public",
            "tagname": "",
            "class": "ContentEditableComponent",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/components/content-editable.js",
            "line": 209,
            "description": "didRender hook, makes sure the element is focused\nand calls the rootNodeUpdated action",
            "itemtype": "method",
            "name": "didRender",
            "class": "ContentEditableComponent",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/components/content-editable.js",
            "line": 233,
            "description": "willDestroyElement, calls the rootNodeUpdated action",
            "itemtype": "method",
            "name": "willDestroyElement",
            "class": "ContentEditableComponent",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/components/content-editable.js",
            "line": 245,
            "description": "keyDown events are handled for simple input we take over from\nbrowser input.",
            "class": "ContentEditableComponent",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/components/content-editable.js",
            "line": 284,
            "description": "currently we disable paste",
            "class": "ContentEditableComponent",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/components/content-editable.js",
            "line": 303,
            "description": "keyUp events are parsed for complex input, for uncaptured events we update\nthe internal state to be inline with reality",
            "class": "ContentEditableComponent",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/components/content-editable.js",
            "line": 311,
            "description": "compositionEnd events are parsed for complex input, for uncaptured events we update\nthe internal state to be inline with reality",
            "class": "ContentEditableComponent",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/components/content-editable.js",
            "line": 335,
            "description": "find defined components, and recreate them",
            "class": "ContentEditableComponent",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/components/content-editable.js",
            "line": 349,
            "description": "specifies whether an input event is \"simple\" or not\nsimple events can be translated to a increment of the cursor position",
            "itemtype": "method",
            "name": "isSimpleTextInputEvent",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "DOMEvent"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "ContentEditableComponent",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/editor/operation.js",
            "line": 3,
            "description": "OPERATION API",
            "class": "ArrowHandler",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/editor/operation.js",
            "line": 7,
            "description": "Replaces a DOM node\n\nThis raw method replaces a DOM node in a callback.  This allows\nthe raw editor to prepare for the brute change and to alter the\ncontents.  It should be used as a last resort.\n\nCallback is used if the editor can prepare itself for the change.\nfailedCallback is called when the editor cannot execute the\nchange.\n\n- domNode: Node which will be altered\n- callback: Function which should execute the dom node\n  alteration.  This function receives the DOM node which was\n  supplied earlier as a first argument.\n- failedCallback: Function which will be executed if the callback\n  could not be executed.  It receives the dom Node and an\n  explanation as to why the execution could not happen\n- motivation: Obligatory statement explaining why you need\n  replaceDomNode and cannot use one of the other methods.",
            "class": "ArrowHandler",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/editor/select.js",
            "line": 4,
            "description": "SELECTION API RESULT\n\nThis is an internal API.  It is subject to change.\n\nThe idea of the selection API is that it yields the nodes on\nwhich changes need to occur with their respective ranges.  This\nmeans that we may return more than one node and that each of the\nnodes might only have a sub-range selected on them.  We also need\nto share sufficient information on the intention of the user, so\nwe can manipulate the contents correctly.\n\nThe resulting entity has a top-level object which describes the\nintention of the user.  Further elements of the selection contain\nthe effectively selected blobs on which we expect the user to\noperate.",
            "params": [
                {
                    "name": "selectedHighlightRange",
                    "description": "Truethy iff the plugin\n  selected a portion of the highlight, rather than a contextual\n  element.",
                    "type": "Boolean"
                },
                {
                    "name": "selections",
                    "description": "A matched selection containing\n  both the tag to which the change should be applied, as well as\n  the RichNode of the change.",
                    "type": "[Selection]",
                    "props": [
                        {
                            "name": "range",
                            "description": "Range which should be\n  highlighted.  Described by start and end.",
                            "type": "[Number]"
                        },
                        {
                            "name": "richNode",
                            "description": "Rich Node to which the\n  selection applies.",
                            "type": "RichNode"
                        }
                    ]
                }
            ],
            "class": "ArrowHandler",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/editor/select.js",
            "line": 33,
            "description": "Selects the current selection, for applying operations to.\nCurrent selection may be a cursor or a range.",
            "class": "ArrowHandler",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/editor/select.js",
            "line": 41,
            "description": "Selects the highlighted range, or part of it, for applying\noperations to.\n\nWith no arguments, this method selects the full highlighted range\nin order to apply operations to it.  The options hash can be used\nto supply constraints:\n\n- { offset } : Array containing the left offset and right offset.\n  Both need to be positive numbers.  The former is the amount of\n  characters to strip off the left, the latter the amount of\n  characters to strip off the right.\n- TODO { regex } : Regular expression to run against the matching\n  string.  Full matching string is used for manipulation.",
            "class": "ArrowHandler",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/editor/select.js",
            "line": 103,
            "description": "Selects nodes based on an RDFa context that should be applied.\n\nOptions for scope search default to 'auto'.\n\nOptions for filtering:\n- range: The range object describing the highlighted region.\n- scope:\n  - 'outer': Search from inner range and search for an item\nspanning the full supplied range or more.\n  - 'inner': Search from outer range and search for an item which\nis fully contained in the supplied range.\n  - 'auto': Perform a best effort to find the nodes in which you're\ninterested.\n- property: string of URI or array of URIs containing the property (or properties) which must apply.\n- typeof: string of URI or array of URIs containing the types which must apply.\n- datatype: string of URI containing the datatype which must apply.\n- resource: string of URI containing the resource which must apply.\n- TODO content: string or regular expression of RDFa content.\n- TODO attribute: string or regular expression of attribute available on the node.",
            "class": "ArrowHandler",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/editor/select.js",
            "line": 165,
            "description": "List of keywords to filter contexts on that can only contain a single value",
            "class": "ArrowHandler",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/editor/select.js",
            "line": 170,
            "description": "List of keywords to filter contexts on that can be either a single value or an array",
            "class": "ArrowHandler",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/editor/select.js",
            "line": 175,
            "description": "Validates if the RDFa attributes of a node matches a specifc set of keys",
            "class": "ArrowHandler",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/editor/select.js",
            "line": 195,
            "description": "Validates if the RDFa context a block matches all filter criteria\nIn case a criteria has multiple values, all values must appear on the same node\n    (TODO context scanner currently only supports multi-value on typeof)\nIn case resource and type are defined, they must appear on the same node\nIn case property and datatype are defined, they must appear on the same node\nIn case resource/typeof and property are defined, property must appear as inner context\n  of the typeof/resource node without any other typeof/resource being defined in between",
            "class": "ArrowHandler",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/editor/select.js",
            "line": 251,
            "description": "Find rich nodes that strictly fall inside the requested range and match the filter criteria\n\nWe will go over the list of RDFa blocks that strictly fall inside the request range and check whether they\nmatch the requested filter criteria. There is no need to start walking the tree of rich nodes attached to\nthe semanticNode because other RDFa contexts will be represented by another RDFa block in the initial list of blocks.\nIn case 2 matching semantic nodes are nested only the highest (ancestor) node is returned.",
            "class": "ArrowHandler",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/editor/select.js",
            "line": 292,
            "description": "Find rich nodes that strictly contain the requested range and match the filter criteria\n\nWe will go over the list of RDFa blocks that strictly contain the request range and check whether they\nmatch the requested filter criteria. There is no need to start walking the tree of rich nodes attached to\nthe semanticNode because other RDFa contexts will be represented by another RDFa block in the initial list of blocks.\nIn case 2 matching semantic nodes are nested only the lowest (child) node is returned.",
            "class": "ArrowHandler",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/editor/update.js",
            "line": 6,
            "description": "Alters a selection from the API described above.\n\nAny selected range can be manipulated.  This method allows such\nchanges to happen on following key terms: property, typeof,\ndataType, resource, content, (TODO: attribute), innerContent,\ninnerHtml\n\n- selection: Object retrieved from #selectContext or\n  #selectHighlight.\n- options: Object specifying desired behaviour.\n- options.remove: Removes RDFa content that was already there.\n    Allows removing any of property, typeof, datatype, resource,\n    content, (TODO: attribute), innerContent, innerHtml\n- options.add: Adds specific content to the selection, pushing\n    nvalues on top of already existing values.  Allows adding any\n    of property, typeof, datatype, resource.  Set the\n    forceNewContext property to true to force a new context if a\n    full tag is selected.\n- options.set: Allows setting any of property, typeof, datatype,\n    resource content attribute innerContent innerHtml.  Set the\n    newContext property to true to force a new context if a full\n    tag is selected.\n- options.desc: You are oncouraged to write a brief description\n    of the desired manipulation here for debugging needs.\n\nThe syntax for specifying items to remove works as follows:\n- true: Removes any value to be removed.\n- string: Removes the specific value as supplied.  If no value\n  matches, nothing is removed.  For semantic content, translation\n  is done based on the current context, eg: if there is a\n  foaf:name in the document, then suppling the string\n  \"http://xmlns.com/foaf/0.1/name\" will usually mean foaf:name is\n  matched.\n- [string]: An array of strings means all the matches will be\n  removed.  Matching works the same way as string.\n- regex: Considers the present value and executes a regular\n  expression on said value.  If the regular expression matches,\n  the value is removed.\n- [regex]: An array of regular experssions.  If any matches, the\n  value itself is matched.\n\nThe syntax for specifying items to add works for all properties\nwhich can be set using \"add\".  Specification works as follows:\n- string: Specifies a single value to set or add.\n- [string]: Specifies a series of values to set or add.\n\nNOTE: The system is free to set or add\nproperties based on a short form (derived from the prefixes\navailable in the context) if it is possible and if it desires to\ndo so.\n\nNOTE: newContext is set to undefined by default and behaves\nsimilar to false.  This is because we assume that when you don't\ncare about the context there's a fair chance that we can merge\nthe contexts.  In specific cases you may desire to have things\nmerge (or not) explicitly.  You should set eithre true or false\nin that case.\n\nNOTE/TODO: In order to make plugins simpler, we should look into\nspecifying namespaces in the plugin.  By sharing these namespaces\nwith these setter methods, it becomes shorter te specify the URLs\nto match on.\n\nNOTE/TODO: It is our intention to allow for multiple operations\nto occur in series.  Altering the range in multiple steps.  This\ncan currently be done by executing the alterSelection multiple\ntimes.  Connecting the changes this way does require you to make\na new selection each time you want to execute a new change.  If\nthis case occurs often *and* we can find sensible defaults on\nupdating the selection, we could make this case simpler.  The\noptions hash would also allow an array in that case.",
            "class": "ArrowHandler",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/editor/update.js",
            "line": 145,
            "class": "ArrowHandler",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/editor/update.js",
            "line": 147,
            "description": "verifies if the inner content should be updated according to the provided specification",
            "itemtype": "method",
            "name": "isInnerContentUpdate",
            "class": "ArrowHandler",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/editor/update.js",
            "line": 156,
            "description": "updates the inner content of the provided nodes according to the specification",
            "itemtype": "method",
            "name": "updateInnerContent",
            "class": "ArrowHandler",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/editor/update.js",
            "line": 171,
            "description": "heuristic to determine whether we should wrap, nest or update the current selection",
            "itemtype": "method",
            "name": "newContextHeuristic",
            "access": "private",
            "tagname": "",
            "class": "ArrowHandler",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/editor/update.js",
            "line": 261,
            "itemtype": "method",
            "name": "nestSelection",
            "access": "private",
            "tagname": "",
            "class": "ArrowHandler",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/editor/update.js",
            "line": 284,
            "description": "returns intersection of 2 arrays.",
            "itemtype": "method",
            "name": "intersection",
            "access": "private",
            "tagname": "",
            "class": "ArrowHandler",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/editor/update.js",
            "line": 295,
            "description": "verifies if rdfa keys are set on the provided object",
            "itemtype": "method",
            "name": "hasRDFAKeys",
            "access": "private",
            "tagname": "",
            "class": "ArrowHandler",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/editor/update.js",
            "line": 309,
            "description": "verifies if the provided update tries to update RDFA attributes",
            "itemtype": "method",
            "name": "isRDFAUpdate",
            "access": "private",
            "tagname": "",
            "class": "ArrowHandler",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/editor/update.js",
            "line": 318,
            "description": "will update a dom attribute, either removing a value from the space separated list or unsetting it",
            "itemtype": "method",
            "name": "removeDOMAttributeValue",
            "access": "private",
            "tagname": "",
            "class": "ArrowHandler",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/editor/update.js",
            "line": 334,
            "description": "updates a dom attribute either adding a value to the space separated list or setting it, avoids doubles",
            "itemtype": "method",
            "name": "addDomAttributeValue",
            "access": "private",
            "tagname": "",
            "class": "ArrowHandler",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/editor/update.js",
            "line": 352,
            "description": "creates a wrapper element around the selection, currently always a div (newContext)",
            "itemtype": "method",
            "name": "wrapSelection",
            "access": "private",
            "tagname": "",
            "class": "ArrowHandler",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/editor/update.js",
            "line": 451,
            "description": "walks up the tree to include parents if possible\nassumes all provided nodes can be wrapped completely\nassumes a consecutive selection, no gaps\nreturns a list of richnodes matching the range",
            "itemtype": "method",
            "name": "findNodesToWrap",
            "access": "private",
            "tagname": "",
            "class": "ArrowHandler",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/editor/update.js",
            "line": 495,
            "description": "verifies if the provided selection is a selection we support",
            "itemtype": "method",
            "name": "isComplexSelection",
            "access": "private",
            "tagname": "",
            "class": "ArrowHandler",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/editor/update.js",
            "line": 558,
            "description": "converts an update specification to an array of values that can be removed/added",
            "itemtype": "method",
            "name": "selectedAttributeValues",
            "access": "private",
            "tagname": "",
            "class": "ArrowHandler",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/editor/update.js",
            "line": 586,
            "description": "Alters the RDFA properties of a selection\nCurrently supports the following RDFA properties/combinations\n- about – a URI or CURIE specifying the resource the metadata is about\n- rel and rev – specifying a relationship and reverse-relationship with another resource, respectively\n- resource – specifying the partner resource (currently ignoring src and href)\n- property – specifying a property for the content of an element or the partner resource\n- content – optional attribute that overrides the content of the element when using the property attribute\n- datatype – optional attribute that specifies the datatype of text specified for use with the property attribute\n- typeof – optional attribute that specifies the RDF type(s) of the subject or the partner resource (the resource that the metadata is about).",
            "itemtype": "method",
            "name": "updateRDFA",
            "access": "private",
            "tagname": "",
            "class": "ArrowHandler",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/arrow-handler.js",
            "line": 20,
            "description": "tests this handler can handle the specified event",
            "itemtype": "method",
            "name": "isHandlerFor",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "DOMEvent"
                }
            ],
            "return": {
                "description": "boolean"
            },
            "access": "public",
            "tagname": "",
            "class": "ArrowHandler",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/arrow-handler.js",
            "line": 31,
            "description": "handle backspace event",
            "itemtype": "method",
            "name": "handleEvent",
            "return": {
                "description": "HandlerResponse.create({allowPropagation: false})",
                "type": "Object"
            },
            "access": "public",
            "tagname": "",
            "class": "ArrowHandler",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/backspace-handler.js",
            "line": 30,
            "description": "tests this handler can handle the specified event",
            "itemtype": "method",
            "name": "isHandlerFor",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "DOMEvent"
                }
            ],
            "return": {
                "description": "boolean"
            },
            "access": "public",
            "tagname": "",
            "class": "BackspaceHandler",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/backspace-handler.js",
            "line": 47,
            "description": "given richnode and absolute position, matches position within text node",
            "itemtype": "method",
            "name": "absoluteToRelativePostion",
            "params": [
                {
                    "name": "richNode",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "position",
                    "description": "",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "",
                "type": "RichNode"
            },
            "access": "private",
            "tagname": "",
            "class": "BackspaceHandler",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/backspace-handler.js",
            "line": 59,
            "description": "handle backspace event",
            "itemtype": "method",
            "name": "handleEvent",
            "return": {
                "description": "",
                "type": "HandlerResponse"
            },
            "access": "public",
            "tagname": "",
            "class": "BackspaceHandler",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/backspace-handler.js",
            "line": 69,
            "description": "return to visible text of a node,\ne.g. removes invisibleSpaces and compacts consecutive spaces to 1 space",
            "itemtype": "method",
            "name": "visibleText",
            "params": [
                {
                    "name": "node",
                    "description": "",
                    "type": "Node"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "access": "public",
            "tagname": "",
            "class": "BackspaceHandler",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/backspace-handler.js",
            "line": 80,
            "description": "removes invisibleSpaces and compacts consecutive spaces to 1 space",
            "itemtype": "method",
            "name": "stringToVisibleText",
            "params": [
                {
                    "name": "text",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "access": "public",
            "tagname": "",
            "class": "BackspaceHandler",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/backspace-handler.js",
            "line": 90,
            "description": "executes a backspace",
            "itemtype": "method",
            "name": "backspace",
            "access": "public",
            "tagname": "",
            "class": "BackspaceHandler",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/dom-helpers.js",
            "line": 12,
            "itemtype": "property",
            "name": "invisibleSpace",
            "type": "string",
            "static": 1,
            "final": 1,
            "class": "DomHelpers",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/dom-helpers.js",
            "line": 20,
            "description": "dom helper to insert extra text into a text node at the provided position",
            "itemtype": "method",
            "name": "sliceTextIntoTextNode",
            "params": [
                {
                    "name": "textNode",
                    "description": "",
                    "type": "TextNode"
                },
                {
                    "name": "text",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "start",
                    "description": "",
                    "type": "Number"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "DomHelpers",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/dom-helpers.js",
            "line": 38,
            "description": "dom helper to insert a text node with an invisible space into a DOMElement.",
            "itemtype": "method",
            "name": "insertTextNodeWithSpace",
            "params": [
                {
                    "name": "parentDomNode",
                    "description": "",
                    "type": "DOMElement"
                },
                {
                    "name": "relativeToSibling",
                    "description": "",
                    "type": "DOMNode"
                },
                {
                    "name": "after",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "DomHelpers",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/dom-helpers.js",
            "line": 62,
            "description": "dom helper to remove a node from the dom tree\nthis inserts replaces the node with its child nodes",
            "itemtype": "method",
            "name": "removeNodeFromTree",
            "params": [
                {
                    "name": "node",
                    "description": "",
                    "type": "DOMNode"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "DomHelpers",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/dom-helpers.js",
            "line": 81,
            "description": "polyfill for ChildNode.remove. Removes node and children from tree.",
            "itemtype": "method",
            "name": "removeNodeFrom",
            "params": [
                {
                    "name": "node",
                    "description": "",
                    "type": "DOMNode"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "DomHelpers",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/dom-helpers.js",
            "line": 94,
            "description": "dom helper to check whether a node is a \"void element\"\nhttps://www.w3.org/TR/html/syntax.html#void-elements",
            "itemtype": "method",
            "name": "isVoidElement",
            "params": [
                {
                    "name": "node",
                    "description": "",
                    "type": "DOMNode"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "access": "public",
            "tagname": "",
            "class": "DomHelpers",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/dom-helpers.js",
            "line": 107,
            "description": "Determine whether a node's text content is entirely whitespace.\nfrom https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Whitespace_in_the_DOM",
            "itemtype": "method",
            "name": "isAllWhitespace",
            "params": [
                {
                    "name": "A",
                    "description": "node implementing the |CharacterData| interface (i.e.,\n            a |Text|, |Comment|, or |CDATASection| node",
                    "type": "DOMNode"
                }
            ],
            "return": {
                "description": "True if all of the text content of |nod| is whitespace,\n            otherwise false.",
                "type": "Boolean"
            },
            "class": "DomHelpers",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/dom-helpers.js",
            "line": 122,
            "description": "Determine whether a node is displayed as a block or is a list item",
            "itemtype": "method",
            "name": "isDisplayedAsBlock",
            "params": [
                {
                    "name": "node",
                    "description": "to check",
                    "type": "DOMNode"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "DomHelpers",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/dom-helpers.js",
            "line": 136,
            "description": "agressive splitting specifically for content in an li",
            "itemtype": "method",
            "name": "smartSplitTextNode",
            "params": [
                {
                    "name": "textNode",
                    "description": "",
                    "type": "DOMNode"
                },
                {
                    "name": "splitAt",
                    "description": "index to split at",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Array the new dom elements that were inserted [parent, siblingParent]"
            },
            "access": "public",
            "tagname": "",
            "class": "DomHelpers",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/dom-helpers.js",
            "line": 156,
            "class": "DomHelpers",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/dom-helpers.js",
            "line": 158,
            "description": "check if the provided node is a list (e.g ol or ul)",
            "itemtype": "method",
            "name": "isList",
            "params": [
                {
                    "name": "node",
                    "description": "",
                    "type": "DOMNode"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "access": "public",
            "tagname": "",
            "class": "DomHelpers",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/dom-helpers.js",
            "line": 169,
            "description": "returns all sibling that are an li",
            "itemtype": "method",
            "name": "siblingLis",
            "params": [
                {
                    "name": "node",
                    "description": "",
                    "type": "DOMNode"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "access": "public",
            "tagname": "",
            "class": "DomHelpers",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/dom-helpers.js",
            "line": 187,
            "description": "check if the provided node is an empty list (e.g ol or ul without li's)",
            "itemtype": "method",
            "name": "isEmptyList",
            "params": [
                {
                    "name": "node",
                    "description": "",
                    "type": "DOMNode"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "access": "public",
            "tagname": "",
            "class": "DomHelpers",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/dom-helpers.js",
            "line": 211,
            "description": "check if the provided node is a list (e.g ol or ul)",
            "itemtype": "method",
            "name": "insertNodeBAfterNodeA",
            "params": [
                {
                    "name": "parent",
                    "description": "",
                    "type": "DOMNode"
                },
                {
                    "name": "nodeA",
                    "description": "",
                    "type": "DOMNode"
                },
                {
                    "name": "nodeB",
                    "description": "",
                    "type": "DomNode"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "access": "public",
            "tagname": "",
            "class": "DomHelpers",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/dom-helpers.js",
            "line": 225,
            "description": "return lowercased tagname of a provided node or an empty string for non element nodes",
            "itemtype": "method",
            "name": "tagName",
            "params": [
                {
                    "name": "node",
                    "description": "",
                    "type": "DOMNode"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "access": "public",
            "tagname": "",
            "class": "DomHelpers",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/dom-helpers.js",
            "line": 237,
            "description": "given html string, convert it into DomElements",
            "itemtype": "method",
            "name": "createElementsFromHtml",
            "params": [
                {
                    "name": "string",
                    "description": "containing html",
                    "type": "String"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "DomHelpers",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/editor-property.js",
            "line": 2,
            "description": "default tag name for creating a property",
            "class": "EditorProperty",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/editor-property.js",
            "line": 20,
            "description": "the preferred tagName of this property, the tagname is not guarantueed to be used unless mustWrap is truthy",
            "itemtype": "property",
            "name": "tagName",
            "type": "String",
            "default": "'span'",
            "class": "EditorProperty",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/editor-property.js",
            "line": 27,
            "description": "indicates whether creation of a new node should be enforced when applying the property",
            "itemtype": "property",
            "name": "newContext",
            "type": "boolean",
            "default": "false",
            "class": "EditorProperty",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/editor-property.js",
            "line": 35,
            "description": "Array of dom attributes to add to a domnode when applying the property",
            "itemtype": "property",
            "name": "attributes",
            "type": "Object",
            "class": "EditorProperty",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/editor-property.js",
            "line": 48,
            "description": "verify if the provided node is has this property enabled",
            "itemtype": "method",
            "name": "enabledAt",
            "params": [
                {
                    "name": "DomNode",
                    "description": "richNode"
                }
            ],
            "return": {
                "description": "Boolean"
            },
            "class": "EditorProperty",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/editor.js",
            "line": 5,
            "description": "SELECTION AND UPDATING API\n\nSelection and Update API go hand-in-hand.  First make a\nselection, then determine the desired changes on the DOM tree.\nNote that selection and update need to be synchronous.  Do not\nassume that a selection that is made in one runloop can be used\nto update the tree in another.\n\nExamples:\n\nAdd context to highlighted range\n\n    const selection = editor.selectHighlight( range );\n    editor.update( selection, {\n      add: {\n        property: \"http://data.vlaanderen.be/ns/besluit/citeert\",\n        typeof: \"http://data.vlaanderen.be/ns/besluit/Besluit\",\n        innerContent: selection.text // this is somewhat redundant, it's roughly the\n                                     // default case.  in fact, it may drop\n                                     // knowledge so you shouldn't do it unless you\n                                     // need to.\n\n      } } );\n\nAdd type to existing type definition:\n\n    const sel = editor.selectContext( range, { typeof: \"http://data.vlaanderen.be/ns/besluit/Besluit\" } );\n    editor.update( sel, { add: {\n      typeof: \"http://mu.semte.ch/vocabularies/ext/AanstellingsBesluit\",\n      newContext: false } } );\n\nAdd new context below existing type definition:\n\n    const sel = editor.selectContext( range, { typeof: \"http://data.vlaanderen.be/ns/besluit/Besluit\" } );\n    editor.update( sel, { add: {\n      typeof: \"http://mu.semte.ch/vocabularies/ext/AanstellingsBesluit\",\n      newContext: true } } );\n\nAlter the type of some context:\n\n    const sel = editor.selectContext( range, { typeof: \"http://tasks-at-hand.com/ns/metaPoint\" } );\n    editor.update( sel, {\n      remove: { typeof: \"http://tasks-at-hand.com/ns/MetaPoint\" },\n      add: { typeof: [\"http://tasks-at-hand.com/ns/AgendaPoint\", \"http://tasks-at-hand.com/ns/Decesion\"] }\n    } );",
            "class": "EmphasisMarkdownHandler",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/emphasis-markdown-handler.js",
            "line": 44,
            "description": "tests this handler can handle the specified event",
            "itemtype": "method",
            "name": "isHandlerFor",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "DOMEvent"
                }
            ],
            "return": {
                "description": "boolean"
            },
            "access": "public",
            "tagname": "",
            "class": "EmphasisMarkdownHandler",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/emphasis-markdown-handler.js",
            "line": 58,
            "description": "handle the event",
            "itemtype": "method",
            "name": "handleEvent",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "DOMEvent"
                }
            ],
            "return": {
                "description": "response",
                "type": "HandlerResponse"
            },
            "class": "EmphasisMarkdownHandler",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/enter-handler.js",
            "line": 28,
            "description": "tests this handler can handle the specified event",
            "itemtype": "method",
            "name": "isHandlerFor",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "DOMEvent"
                }
            ],
            "return": {
                "description": "boolean"
            },
            "access": "public",
            "tagname": "",
            "class": "EnterHandler",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/enter-handler.js",
            "line": 39,
            "description": "handle the event",
            "itemtype": "method",
            "name": "handleEvent",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "DOMEvent"
                }
            ],
            "return": {
                "description": "response",
                "type": "HandlerResponse"
            },
            "class": "EnterHandler",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/enter-handler.js",
            "line": 103,
            "itemtype": "method",
            "name": "relevantNodeForEnter",
            "params": [
                {
                    "name": "richnode",
                    "description": "",
                    "type": "RichNode"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "EnterHandler",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/enter-handler.js",
            "line": 115,
            "itemtype": "method",
            "name": "lisIsEmpty",
            "params": [
                {
                    "name": "node",
                    "description": "",
                    "type": "RichNode"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "EnterHandler",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/enter-handler.js",
            "line": 125,
            "itemtype": "method",
            "name": "insertEnterInLi",
            "params": [
                {
                    "name": "node",
                    "description": "",
                    "type": "RichNode"
                },
                {
                    "name": "nodeForEnter",
                    "description": "",
                    "type": "RichNode"
                },
                {
                    "name": "currentPosition",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "currentNode",
                    "description": "",
                    "type": "DOMNode"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "EnterHandler",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/enter-handler.js",
            "line": 167,
            "itemtype": "method",
            "name": "insertEnterInP",
            "params": [
                {
                    "name": "node",
                    "description": "",
                    "type": "RichNode"
                },
                {
                    "name": "nodeForEnter",
                    "description": "First block node above our cursor",
                    "type": "RichNode"
                },
                {
                    "name": "currentPosition",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "currentNode",
                    "description": "Node where the cursor is currently at",
                    "type": "DOMNode"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "EnterHandler",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/flat-map.js",
            "line": 1,
            "description": "takes a tree and returns a list of nodes that match the given predicate",
            "itemtype": "method",
            "name": "flatMap",
            "params": [
                {
                    "name": "RichNode",
                    "description": "",
                    "type": "RichNode"
                },
                {
                    "name": "predicate",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "stopOnFirstMatch",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "[Array] list of nodes matching the predicate function"
            },
            "class": "HandlerResponse",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/forgiving-action.js",
            "line": 1,
            "description": "Wrapping function to call closure actions and be tolerant if there is no action\nassigned to it.",
            "itemtype": "method",
            "name": "forgivingAction",
            "params": [
                {
                    "name": "context",
                    "description": "context where the potential action should be defined",
                    "type": "Object"
                },
                {
                    "name": "name",
                    "description": "The name of the action",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the function assiociated with the action, or function returning nothing",
                "type": "Function"
            },
            "access": "public",
            "tagname": "",
            "class": "HandlerResponse",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/handler-response.js",
            "line": 11,
            "description": "specify if the event can be handled by another handler",
            "itemtype": "property",
            "name": "allowPropagation",
            "type": "boolean",
            "default": "true",
            "access": "public",
            "tagname": "",
            "class": "HandlerResponse",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/handler-response.js",
            "line": 19,
            "description": "specify if the event can be handled by the browser",
            "itemtype": "property",
            "name": "allowBrowserDefault",
            "type": "boolean",
            "default": "false",
            "access": "public",
            "tagname": "",
            "class": "HandlerResponse",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/header-markdown-handler.js",
            "line": 31,
            "description": "tests this handler can handle the specified event",
            "itemtype": "method",
            "name": "isHandlerFor",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "DOMEvent"
                }
            ],
            "return": {
                "description": "boolean"
            },
            "access": "public",
            "tagname": "",
            "class": "HeaderMarkdownHandler",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/header-markdown-handler.js",
            "line": 45,
            "description": "handle the event",
            "itemtype": "method",
            "name": "handleEvent",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "DOMEvent"
                }
            ],
            "return": {
                "description": "response",
                "type": "HandlerResponse"
            },
            "class": "HeaderMarkdownHandler",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/ignore-modifiers-handler.js",
            "line": 13,
            "description": "Yields a truethy value for all events which we can recognise as\nbeing an unimportant key-press which is there to change state.\n\nSkips keyboard events for:\n- Alt\n- Control\n- Meta\n- Shift",
            "class": "IgnoreModifiersHandler",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/ignore-modifiers-handler.js",
            "line": 27,
            "description": "There is no desire to actually handle this event.  Other inputs\nmay choose to also act on this behaviour, hence we allow\npropagation.",
            "class": "IgnoreModifiersHandler",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/list-helpers.js",
            "line": 8,
            "description": "Handlers for list action.\n\n- It works only when current node is a textNode\n- The general flow is dependent on two situation types:\n    a. Either the current node is already in al list when this action is fired.\n        (see further notes for wat it basically means 'being in a list')\n    b. Not in a list, create a new list\n\nTODO\n----\n - cursor positonining is uncontrolled right now, after action handled.\n - some times empty textnodes are not included in logicalBlock. Probably an issue with the conditoin isDisplayedAsBlock\n\nIMPLEMENTED BEHAVIOUR\n---------------------\n  The '|' represents the cursor and gives an idea about the currentNode.\n\n Some examples\n\n  case 1\n  ------\n  Call unorderedListAction x 1\n  ```\n  | a some text\n  ```\n  ```\n  <ul>\n    <li>| a some text</li>\n  </ul>\n  ```\n\n  case 2\n  ------\n  Call unorderedListAction x 1\n  ```\n  a some <span> t | ext </span>\n  ```\n  ```\n  <ul>\n    <li>a some <span> t | ext </span></li>\n  </ul>\n  ```\n\n  case 3\n  ------\n  Call indent x 1\n  ```\n   <ul>\n    <li> a some <div> block element text | </div>  other text </li>\n   </ul>\n  ```\n  ```\n   <ul>\n     <li> a some\n       <ul>\n         <li><div> block element text | </div></li>\n       </ul>\n       other text\n     </li>\n   </ul>\n  ```\n\n  case 4\n  ------\n  Call unorderedListAction x 1\n   ```\n   A case |- with br-tag <br> new line. <br> we Will need to refine this.\n   ```\n\n   ```\n   <ul>\n     <li>A case |- with br-tag <br> new line. <br> we Will need to refine this.</li>\n   </ul>\n   ```\n\n  case 6\n  ------\n  Call unorderedListAction or unindent x 1\n  ```\n  <ul>\n    <li> The first </li>\n    <li>| a some text</li>\n    <li> the last </li>\n  </ul>\n  ```\n\n   ```\n  <ul>\n   <li> The first </li>\n  </ul>\n  | a some text\n  <ul>\n    <li> the last </li>\n  </ul>\n   ```\n\n  case 7\n  ------\n  Call unorderedListAction or unindent x 1\n  ```\n  <ul>\n    <li>| a some text</li>\n  </ul>\n  ```\n\n   ```\n   a some <span> t | ext </span>\n   ```\n\n  case 8\n  ------\n  Call unorderedListAction or unindent x 1\n  ```\n   <ul>\n    <li> a | some <div> block element text </div>  other text </li>\n   </ul>\n  ```\n  ```\n   <ul>\n    <li> <div> block element text </div>  other text </li>\n   </ul>\n   a | some\n  ```\n\n  case 9\n  ------\n  Call unorderedListAction or unindent x 1\n  ```\n   <ul>\n     <li> item 1</li>\n    <li>\n      <ul>\n         <li> subitem 1</li>\n         <li> subitem | 2 </li>\n         <li> subitem 3</li>\n      </ul>\n    </li>\n    <li> item 2</li>\n   </ul>\n  ```\n  ```\n   <ul>\n     <li> item 1</li>\n    <li>\n      <ul>\n         <li> subitem 1</li>\n      </ul>\n    </li>\n    <li> subitem | 2 </li>\n    <li>\n      <ul>\n         <li> subitem 3</li>\n      </ul>\n    </li>\n    <li> item 2</li>\n   </ul>\n  ```\n\n  case 10\n  ------\n  Call unorderedListAction or unindent x 1\n\n  ```\n   <ul>\n     <li> item 1</li>\n    <li>\n      <ul>\n         <li> subitem 1</li>\n         <li><div> subitem | 2 </div></li>\n         <li> subitem 3</li>\n      </ul>\n    </li>\n    <li> item 2</li>\n   </ul>\n  ```\n  ```\n   <ul>\n     <li> item 1</li>\n    <li>\n      <ul>\n         <li> subitem 1</li>\n      </ul>\n    </li>\n    <li><div> subitem | 2 </div></li>\n    <li>\n      <ul>\n         <li> subitem 3</li>\n      </ul>\n    </li>\n    <li> item 2</li>\n   </ul>\n  ```\n\n  case 11\n  ------\n  Call unorderedListAction x 1\n\n  ```\n  <ul>\n    <li> The first </li>\n    <li>| a some text</li>\n    <li> the last </li>\n  </ul>\n  ```\n\n  ```\n  <ol>\n    <li> The first </li>\n    <li>| a some text</li>\n    <li> the last </li>\n  </ol>",
            "class": "ListInsertionMarkdownHandler",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/list-helpers.js",
            "line": 222,
            "description": "handles unordered list",
            "class": "ListInsertionMarkdownHandler",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/list-helpers.js",
            "line": 235,
            "description": "handles ordered list",
            "class": "ListInsertionMarkdownHandler",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/list-helpers.js",
            "line": 248,
            "description": "handles indent Action",
            "class": "ListInsertionMarkdownHandler",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/list-helpers.js",
            "line": 269,
            "description": "handles unindent Action",
            "class": "ListInsertionMarkdownHandler",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/list-helpers.js",
            "line": 288,
            "description": "HELPERS",
            "class": "ListInsertionMarkdownHandler",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/list-helpers.js",
            "line": 292,
            "description": "Boilerplate to handle List action\nBoth for UL and OL",
            "class": "ListInsertionMarkdownHandler",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/list-helpers.js",
            "line": 315,
            "description": "Checks whether node is in a list\n\n  EXAMPLES NOT IN A LIST\n  ----------------------\n\n  ```\n  | a some text\n  ```\n\n   ```\n   a some <span> t | ext </span>\n   ```\n\n  EXAMPLES IN A LIST\n  ------------------\n\n   Note here: when in a nested list context even if cursors is in block element,\n   we return true\n   ```\n   <ul>\n    <li> a some <div> block element text | </div>  other text </li>\n   </ul>\n   ```\n\n  ```\n  <ul>\n    <li> some text\n        <a href=\"#\">an <i> italic | </i> link</a>\n    </li>\n  </ul>\n  ```",
            "class": "ListInsertionMarkdownHandler",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/list-helpers.js",
            "line": 360,
            "description": "Inserts a new list.",
            "class": "ListInsertionMarkdownHandler",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/list-helpers.js",
            "line": 384,
            "description": "Unindents logical block contents from context it resides in.",
            "class": "ListInsertionMarkdownHandler",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/list-helpers.js",
            "line": 458,
            "description": "Switches list type where currentNode is situated in.",
            "class": "ListInsertionMarkdownHandler",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/list-helpers.js",
            "line": 506,
            "description": "Given a node, we want to grow a region (a list of nodes)\nwe consider sensible for inserting a new list\n\nCURRENT IMPLEMENTATION\n----------------------\n\nBest to use an example. \"|\" is cursor.\n```\n<p>\n bla bal <span><a href=\"#\"> foo | <br></a> test <div> a block </div>\n</p>\n```\n\n The region we return.\n\n ```\n bla bal <span><a href=\"#\"> foo | <br></a> test\n ```",
            "itemtype": "method",
            "name": "getLogicalBlockContentsForNewList",
            "params": [
                {
                    "name": "domNode",
                    "description": "where cursor is",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "[Array] [domNode1, ..., domNodeN]"
            },
            "access": "public",
            "tagname": "",
            "class": "ListInsertionMarkdownHandler",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/list-helpers.js",
            "line": 539,
            "description": "Given a node in a list, we want to grow a region (a list of nodes)\nwe consider sensible to for switching the type of list.\nIn this case, we return the parent list dom element where current\ndomNode is in.",
            "itemtype": "method",
            "name": "getLogicalBlockContentsSwitchListType",
            "params": [
                {
                    "name": "domNode",
                    "description": "where cursor is",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "[Array] [domNode1, ..., domNodeN]"
            },
            "access": "public",
            "tagname": "",
            "class": "ListInsertionMarkdownHandler",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/list-helpers.js",
            "line": 558,
            "description": "Given a node in a nested list context, build the logicalBlock contents to perform\nan unindent (i.e. unindent) action upon.\n\nCURRENT IMPLEMENTATION\n----------------------\n\nBest to use an example. \"|\" is cursor.\n\nType case 1\n-----------\n\n```\n<ol>\n  <li>\n    <ul>\n      some text |\n    </ul>\n  </li>\n</ol>\n```\n\n The region we return.\n\n ```\n some text |\n ```\n\nType case 2\n-----------\n\n```\n<ol>\n  <li>\n    <ul>\n      some text <div> text in a block | </div>\n    </ul>\n  </li>\n</ol>\n```\n\n The region we return.\n\n ```\n <div> text in a block | </div>\n ```",
            "itemtype": "method",
            "name": "getLogicalBlockContentsForIndentationAction",
            "params": [
                {
                    "name": "domNode",
                    "description": "where cursor is",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "[Array] [domNode1, ..., domNodeN]"
            },
            "access": "public",
            "tagname": "",
            "class": "ListInsertionMarkdownHandler",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/list-helpers.js",
            "line": 624,
            "description": "Walk up the parents until a blockElement is matched.\nreturn the node of wich the parent is the matching\nblock element\nThis is useful for fetching the span element in following example:\n  ```\n   <p>\n     text <span> foo <a href=\"#\"> current node | </a></span>\n   </p>\n  ```\n The node we return.\n\n ```\n <span> foo <a href=\"#\"> current node | </a></span>\n ```",
            "class": "ListInsertionMarkdownHandler",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/list-helpers.js",
            "line": 650,
            "description": "Given a node, we want to grow a region (a list of sibling nodes)\nuntil we match a condition",
            "class": "ListInsertionMarkdownHandler",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/list-helpers.js",
            "line": 719,
            "description": "Checks wether node is safe to put a cursor in. Checks either left or right from the node.",
            "class": "ListInsertionMarkdownHandler",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/list-helpers.js",
            "line": 751,
            "description": "Makes sure logicalBlock is cursor safe.\nBy checking the first BlockContentNode as being safe at its left.\nThe last node is checked at its right.\nAdds invisibleWhitespace\nThe inbetween elements are ignored.\n(This function is basically something which should be executed at anthoer level)",
            "class": "ListInsertionMarkdownHandler",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/list-insertion-markdown-handler.js",
            "line": 40,
            "description": "tests this handler can handle the specified event",
            "itemtype": "method",
            "name": "isHandlerFor",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "DOMEvent"
                }
            ],
            "return": {
                "description": "boolean"
            },
            "access": "public",
            "tagname": "",
            "class": "ListInsertionMarkdownHandler",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/list-insertion-markdown-handler.js",
            "line": 54,
            "description": "handle the event",
            "itemtype": "method",
            "name": "handleEvent",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "DOMEvent"
                }
            ],
            "return": {
                "description": "response",
                "type": "HandlerResponse"
            },
            "class": "ListInsertionMarkdownHandler",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/next-text-node.js",
            "line": 10,
            "itemtype": "method",
            "name": "findFirstLi",
            "params": [
                {
                    "name": "node",
                    "description": "the ul node to search in",
                    "type": "DomNode"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "RawEditor",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/next-text-node.js",
            "line": 23,
            "itemtype": "method",
            "name": "firstTextChild",
            "params": [
                {
                    "name": "node",
                    "description": "",
                    "type": "DOMNode"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "RawEditor",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/next-text-node.js",
            "line": 47,
            "description": "returns the node we want to place the marker before (or in if it's a text node)",
            "itemtype": "method",
            "name": "findNextApplicableNode",
            "params": [
                {
                    "name": "node",
                    "description": "",
                    "type": "DOMNode"
                },
                {
                    "name": "rootNode",
                    "description": "",
                    "type": "DOMElement"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "RawEditor",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/next-text-node.js",
            "line": 101,
            "description": "find or create the next logical text node for the editor in the dom tree",
            "itemtype": "method",
            "name": "nextTextNode",
            "params": [
                {
                    "name": "textNode",
                    "description": "",
                    "type": "TextNode"
                },
                {
                    "name": "root",
                    "description": "of the dom tree, don't move outside of this root",
                    "type": "DOMElement"
                }
            ],
            "return": {
                "description": "nextNode or null if textNode is at the end of the tree",
                "type": "TextNode"
            },
            "class": "RawEditor",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/pernet-api.js",
            "line": 7,
            "description": "Alters a selection from the API described above.\n\nAny selected range can be manipulated.  This method allows such\nchanges to happen on following key terms: property, typeof,\ndataType, resource, content, (TODO: attribute), innerContent,\ninnerHtml\n\n- selection: Object retrieved from #selectContext or\n  #selectHighlight.\n- options: Object specifying desired behaviour.\n- options.remove: Removes RDFa content that was already there.\n    Allows removing any of property, typeof, datatype, resource,\n    content, (TODO: attribute), innerContent, innerHtml\n- options.add: Adds specific content to the selection, pushing\n    nvalues on top of already existing values.  Allows adding any\n    of property, typeof, datatype, resource.  Set the\n    forceNewContext property to true to force a new context if a\n    full tag is selected.\n- options.set: Allows setting any of property, typeof, datatype,\n    resource content attribute innerContent innerHtml.  Set the\n    newContext property to true to force a new context if a full\n    tag is selected.\n- options.desc: You are oncouraged to write a brief description\n    of the desired manipulation here for debugging needs.\n\nThe syntax for specifying items to remove works as follows:\n- true: Removes any value to be removed.\n- string: Removes the specific value as supplied.  If no value\n  matches, nothing is removed.  For semantic content, translation\n  is done based on the current context, eg: if there is a\n  foaf:name in the document, then suppling the string\n  \"http://xmlns.com/foaf/0.1/name\" will usually mean foaf:name is\n  matched.\n- [string]: An array of strings means all the matches will be\n  removed.  Matching works the same way as string.\n- regex: Considers the present value and executes a regular\n  expression on said value.  If the regular expression matches,\n  the value is removed.\n- [regex]: An array of regular experssions.  If any matches, the\n  value itself is matched.\n\nThe syntax for specifying items to add works for all properties\nwhich can be set using \"add\".  Specification works as follows:\n- string: Specifies a single value to set or add.\n- [string]: Specifies a series of values to set or add.\n\nNOTE: The system is free to set or add\nproperties based on a short form (derived from the prefixes\navailable in the context) if it is possible and if it desires to\ndo so.\n\nNOTE: newContext is set to undefined by default and behaves\nsimilar to false.  This is because we assume that when you don't\ncare about the context there's a fair chance that we can merge\nthe contexts.  In specific cases you may desire to have things\nmerge (or not) explicitly.  You should set eithre true or false\nin that case.\n\nNOTE/TODO: In order to make plugins simpler, we should look into\nspecifying namespaces in the plugin.  By sharing these namespaces\nwith these setter methods, it becomes shorter te specify the URLs\nto match on.\n\nNOTE/TODO: It is our intention to allow for multiple operations\nto occur in series.  Altering the range in multiple steps.  This\ncan currently be done by executing the alterSelection multiple\ntimes.  Connecting the changes this way does require you to make\na new selection each time you want to execute a new change.  If\nthis case occurs often *and* we can find sensible defaults on\nupdating the selection, we could make this case simpler.  The\noptions hash would also allow an array in that case.",
            "class": "RawEditor",
            "module": "pernetApi"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/pernet-api.js",
            "line": 118,
            "class": "RawEditor",
            "module": "pernetApi"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/pernet-api.js",
            "line": 120,
            "description": "verifies if the inner content should be updated according to the provided specification",
            "itemtype": "method",
            "name": "isInnerContentUpdate",
            "class": "RawEditor",
            "module": "pernetApi"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/pernet-api.js",
            "line": 129,
            "description": "updates the inner content of the provided nodes according to the specification",
            "itemtype": "method",
            "name": "updateInnerContent",
            "class": "RawEditor",
            "module": "pernetApi"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/pernet-api.js",
            "line": 144,
            "description": "heuristic to determine whether we should wrap, nest or update the current selection",
            "itemtype": "method",
            "name": "newContextHeuristic",
            "access": "private",
            "tagname": "",
            "class": "RawEditor",
            "module": "pernetApi"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/pernet-api.js",
            "line": 233,
            "itemtype": "method",
            "name": "nestSelection",
            "access": "private",
            "tagname": "",
            "class": "RawEditor",
            "module": "pernetApi"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/pernet-api.js",
            "line": 256,
            "description": "returns intersection of 2 arrays.",
            "itemtype": "method",
            "name": "intersection",
            "access": "private",
            "tagname": "",
            "class": "RawEditor",
            "module": "pernetApi"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/pernet-api.js",
            "line": 267,
            "description": "verifies if rdfa keys are set on the provided object",
            "itemtype": "method",
            "name": "hasRDFAKeys",
            "access": "private",
            "tagname": "",
            "class": "RawEditor",
            "module": "pernetApi"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/pernet-api.js",
            "line": 281,
            "description": "verifies if the provided update tries to update RDFA attributes",
            "itemtype": "method",
            "name": "isRDFAUpdate",
            "access": "private",
            "tagname": "",
            "class": "RawEditor",
            "module": "pernetApi"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/pernet-api.js",
            "line": 290,
            "description": "will update a dom attribute, either removing a value from the space separated list or unsetting it",
            "itemtype": "method",
            "name": "removeDOMAttributeValue",
            "access": "private",
            "tagname": "",
            "class": "RawEditor",
            "module": "pernetApi"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/pernet-api.js",
            "line": 306,
            "description": "updates a dom attribute either adding a value to the space separated list or setting it, avoids doubles",
            "itemtype": "method",
            "name": "addDomAttributeValue",
            "access": "private",
            "tagname": "",
            "class": "RawEditor",
            "module": "pernetApi"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/pernet-api.js",
            "line": 324,
            "description": "creates a wrapper element around the selection, currently always a div (newContext)",
            "itemtype": "method",
            "name": "wrapSelection",
            "access": "private",
            "tagname": "",
            "class": "RawEditor",
            "module": "pernetApi"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/pernet-api.js",
            "line": 422,
            "description": "walks up the tree to include parents if possible\nassumes all provided nodes can be wrapped completely\nassumes a consecutive selection, no gaps\nreturns a list of richnodes matching the range",
            "itemtype": "method",
            "name": "findNodesToWrap",
            "access": "private",
            "tagname": "",
            "class": "RawEditor",
            "module": "pernetApi"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/pernet-api.js",
            "line": 466,
            "description": "verifies if the provided selection is a selection we support",
            "itemtype": "method",
            "name": "isComplexSelection",
            "access": "private",
            "tagname": "",
            "class": "RawEditor",
            "module": "pernetApi"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/pernet-api.js",
            "line": 514,
            "description": "converts an update specification to an array of values that can be removed/added",
            "itemtype": "method",
            "name": "selectedAttributeValues",
            "access": "private",
            "tagname": "",
            "class": "RawEditor",
            "module": "pernetApi"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/pernet-api.js",
            "line": 542,
            "description": "Alters the RDFA properties of a selection\nCurrently supports the following RDFA properties/combinations\n- about – a URI or CURIE specifying the resource the metadata is about\n- rel and rev – specifying a relationship and reverse-relationship with another resource, respectively\n- resource – specifying the partner resource (currently ignoring src and href)\n- property – specifying a property for the content of an element or the partner resource\n- content – optional attribute that overrides the content of the element when using the property attribute\n- datatype – optional attribute that specifies the datatype of text specified for use with the property attribute\n- typeof – optional attribute that specifies the RDF type(s) of the subject or the partner resource (the resource that the metadata is about).",
            "itemtype": "method",
            "name": "updateRDFA",
            "access": "private",
            "tagname": "",
            "class": "RawEditor",
            "module": "pernetApi"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/previous-text-node.js",
            "line": 10,
            "itemtype": "method",
            "name": "findLastLi",
            "params": [
                {
                    "name": "node",
                    "description": "the ul node to search in",
                    "type": "DomNode"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "RawEditor",
            "module": "pernetApi"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/previous-text-node.js",
            "line": 23,
            "itemtype": "method",
            "name": "firstTextChild",
            "params": [
                {
                    "name": "node",
                    "description": "",
                    "type": "DOMNode"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "RawEditor",
            "module": "pernetApi"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/previous-text-node.js",
            "line": 47,
            "description": "returns the node we want to place the marker before (or in if it's a text node)",
            "itemtype": "method",
            "name": "findPreviousApplicableNode",
            "params": [
                {
                    "name": "node",
                    "description": "",
                    "type": "DOMNode"
                },
                {
                    "name": "rootNode",
                    "description": "",
                    "type": "DOMElement"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "RawEditor",
            "module": "pernetApi"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/previous-text-node.js",
            "line": 101,
            "description": "find or create the next logical text node for the editor in the dom tree",
            "itemtype": "method",
            "name": "nextTextNode",
            "params": [
                {
                    "name": "textNode",
                    "description": "",
                    "type": "TextNode"
                },
                {
                    "name": "root",
                    "description": "of the dom tree, don't move outside of this root",
                    "type": "DOMElement"
                }
            ],
            "return": {
                "description": "nextNode or null if textNode is at the end of the tree",
                "type": "TextNode"
            },
            "access": "public",
            "tagname": "",
            "class": "RawEditor",
            "module": "pernetApi"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/property-helpers.js",
            "line": 24,
            "description": "verifies if a property is enabled on all leaf nodes of the supplied richNode",
            "itemtype": "method",
            "name": "propertyIsEnabledOnLeafNodes",
            "return": {
                "description": "boolean"
            },
            "class": "RawEditor",
            "module": "pernetApi"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/property-helpers.js",
            "line": 37,
            "description": "We need to apply or remove a property to all portions of text based on the output\ncontained in them.  We can split the important nodes in three\npieces:\n\n- start: text nodes which contain partial content to highlight\n- middle: rich nodes which are the highest parent of a text node that are still contained in the selected range\n- end: trailing text nodes which contain partial content to highlight\n\nDetecting this range is tricky",
            "itemtype": "method",
            "name": "findSuitableNodesToApplyOrCancelProperty",
            "params": [
                {
                    "name": "Selection",
                    "description": "selection"
                }
            ],
            "return": {
                "description": "Array array of selections"
            },
            "class": "RawEditor",
            "module": "pernetApi"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/property-helpers.js",
            "line": 94,
            "description": "apply a property to an existing dom node",
            "itemtype": "method",
            "name": "rawApplyProperty",
            "params": [
                {
                    "name": "DOMElement",
                    "description": "domNode"
                },
                {
                    "name": "EditorProperty",
                    "description": "property"
                }
            ],
            "class": "RawEditor",
            "module": "pernetApi"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/property-helpers.js",
            "line": 112,
            "description": "creates a new DOMElement in line with the property specification",
            "itemtype": "method",
            "name": "createWrapperForProperty",
            "params": [
                {
                    "name": "EditorProperty",
                    "description": "property"
                }
            ],
            "class": "RawEditor",
            "module": "pernetApi"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/property-helpers.js",
            "line": 126,
            "description": "apply a property to a selection",
            "itemtype": "method",
            "name": "applyProperty",
            "params": [
                {
                    "name": "selection",
                    "description": ""
                },
                {
                    "name": "document,",
                    "description": "should provide a pernet api"
                },
                {
                    "name": "property",
                    "description": "an editor property"
                }
            ],
            "class": "RawEditor",
            "module": "pernetApi"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/property-helpers.js",
            "line": 235,
            "description": "remove a property from a richNode",
            "class": "RawEditor",
            "module": "pernetApi"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/property-helpers.js",
            "line": 328,
            "description": "cancel a property on a selection",
            "itemtype": "method",
            "name": "cancelProperty",
            "params": [
                {
                    "name": "selection",
                    "description": ""
                },
                {
                    "name": "document,",
                    "description": "should provide a pernet api"
                },
                {
                    "name": "property",
                    "description": "an editor property"
                }
            ],
            "class": "RawEditor",
            "module": "pernetApi"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/raw-editor.js",
            "line": 58,
            "description": "Called after relevant input. Checks content and calls closureActions when changes detected\nhandleTextInsert, handleTextRemove, handleFullContentUpdate",
            "itemtype": "method",
            "name": "generateDiffEvents",
            "params": [
                {
                    "name": "Optional",
                    "description": "argument pass info to event consumers.",
                    "type": "Array"
                }
            ],
            "access": "public",
            "tagname": "!!",
            "class": "RawEditor",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/raw-editor.js",
            "line": 103,
            "description": "root node of the editor",
            "itemtype": "property",
            "name": "rootNode",
            "type": "DOMNode",
            "access": "public",
            "tagname": "",
            "class": "RawEditor",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/raw-editor.js",
            "line": 111,
            "description": "richNode, a rich representation of the dom tree created with NodeWalker",
            "itemtype": "property",
            "name": "richNode",
            "type": "RichNode",
            "access": "public",
            "tagname": "",
            "class": "RawEditor",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/raw-editor.js",
            "line": 119,
            "description": "the current selection in the editor",
            "itemtype": "property",
            "name": "currentSelection",
            "type": "Array",
            "access": "public",
            "tagname": "NOTE: don't change this in place",
            "class": "RawEditor",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/raw-editor.js",
            "line": 129,
            "description": "the start of the current range\n\nNOTE: this is correctly bound because currentSelection is never\nchanged in place",
            "class": "RawEditor",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/raw-editor.js",
            "line": 140,
            "description": "the domNode containing our caret\n\nNOTE: is set to null on a selection that spans nodes",
            "itemtype": "property",
            "name": "currentNode",
            "type": "DomNode",
            "access": "public",
            "tagname": "",
            "class": "RawEditor",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/raw-editor.js",
            "line": 190,
            "description": "current textContent from editor",
            "itemtype": "property",
            "name": "currentTextContent",
            "type": "String",
            "access": "public",
            "tagname": "",
            "class": "RawEditor",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/raw-editor.js",
            "line": 199,
            "description": "components present in the editor",
            "itemtype": "property",
            "name": "components",
            "type": "{Object}",
            "access": "public",
            "tagname": "",
            "class": "RawEditor",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/raw-editor.js",
            "line": 207,
            "description": "is current selection a cursor",
            "itemtype": "property",
            "name": "currentSelectionIsACursor",
            "type": "boolean",
            "access": "public",
            "tagname": "",
            "class": "RawEditor",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/raw-editor.js",
            "line": 262,
            "itemtype": "method",
            "name": "replaceTextWithHTML",
            "params": [
                {
                    "name": "start",
                    "description": "index absolute",
                    "type": "Number"
                },
                {
                    "name": "end",
                    "description": "index absolute",
                    "type": "Number"
                },
                {
                    "name": "html",
                    "description": "string",
                    "type": "String"
                },
                {
                    "name": "Optional",
                    "description": "extra info, which will be passed around when triggering update events.",
                    "type": "Array"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "RawEditor",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/raw-editor.js",
            "line": 288,
            "description": "replaces dom node with html string.",
            "itemtype": "method",
            "name": "replaceNodeWithHTML",
            "params": [
                {
                    "name": "DomNode",
                    "description": "to work on",
                    "type": "Object"
                },
                {
                    "name": "string",
                    "description": "containing html",
                    "type": "Object"
                },
                {
                    "name": "instructive",
                    "description": "to place cursor after inserted HTML,",
                    "type": "Boolean"
                },
                {
                    "name": "Optional",
                    "description": "extra info, which will be passed around when triggering update events.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "returns inserted domNodes (with possibly an extra trailing textNode)."
            },
            "access": "public",
            "tagname": "",
            "class": "RawEditor",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/raw-editor.js",
            "line": 344,
            "description": "removes a node. If node to be removed is contains current cursor position. The cursor\nposition will be update to a previous sensible node too.",
            "itemtype": "method",
            "name": "removeNode",
            "params": [
                {
                    "name": "DomNode",
                    "description": "to work on",
                    "type": "Object"
                },
                {
                    "name": "Optional",
                    "description": "extra info, which will be passed around when triggering update events.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "returns node we ended up in."
            },
            "access": "public",
            "tagname": "",
            "class": "RawEditor",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/raw-editor.js",
            "line": 380,
            "description": "Prepends the children of a node with an html block",
            "itemtype": "method",
            "name": "prependChildrenHTML",
            "params": [
                {
                    "name": "DomNode",
                    "description": "to work on",
                    "type": "Object"
                },
                {
                    "name": "string",
                    "description": "containing html",
                    "type": "Object"
                },
                {
                    "name": "instructive",
                    "description": "to place cursor after inserted HTML,",
                    "type": "Boolean"
                },
                {
                    "name": "Optional",
                    "description": "extra info, which will be passed around when triggering update events.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "returns inserted domNodes (with possibly an extra trailing textNode)."
            },
            "access": "public",
            "tagname": "",
            "class": "RawEditor",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/raw-editor.js",
            "line": 427,
            "description": "inserts an emtpy textnode after richnode, if non existant.",
            "itemtype": "method",
            "name": "insertElementsAfterRichNode",
            "params": [
                {
                    "name": "parent",
                    "description": "element where the elements should be added.",
                    "type": "RichNode"
                },
                {
                    "name": "last",
                    "description": "sibling where new elements should occur after",
                    "type": "RichNode"
                },
                {
                    "name": "array",
                    "description": "of (DOM) elements to insert",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "returns last inserted element as RichNode. That is a rich textNode",
                "type": "RichNode"
            },
            "access": "private",
            "tagname": "",
            "class": "RawEditor",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/raw-editor.js",
            "line": 447,
            "description": "Prepends a list of elements to children",
            "itemtype": "method",
            "name": "prependElementsRichNode",
            "params": [
                {
                    "name": "parent",
                    "description": "element where the elements should be added.",
                    "type": "RichNode"
                },
                {
                    "name": "array",
                    "description": "of (DOM) elements to insert",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "returns last inserted element as RichNode",
                "type": "RichNode"
            },
            "access": "private",
            "tagname": "",
            "class": "RawEditor",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/raw-editor.js",
            "line": 469,
            "description": "Inserts an array of elements into the editor.",
            "itemtype": "method",
            "name": "insertElementsAfterRichNode",
            "params": [
                {
                    "name": "parent",
                    "description": "element where the elements should be added.",
                    "type": "RichNode"
                },
                {
                    "name": "last",
                    "description": "sibling where new elements should occur after",
                    "type": "RichNode"
                },
                {
                    "name": "array",
                    "description": "of (DOM) elements to insert",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "returns last inserted element as RichNode",
                "type": "RichNode"
            },
            "access": "private",
            "tagname": "",
            "class": "RawEditor",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/raw-editor.js",
            "line": 494,
            "description": "Higlight a section of the editor text",
            "itemtype": "method",
            "name": "highlightRange",
            "params": [
                {
                    "name": "start",
                    "description": "Start of the region",
                    "type": "Number"
                },
                {
                    "name": "end",
                    "description": "End of the region",
                    "type": "Number"
                },
                {
                    "name": "data",
                    "description": "map of data to be included on the highlight, can be used to add rdfa or data- attributes",
                    "type": "Object"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "RawEditor",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/raw-editor.js",
            "line": 523,
            "description": "Clear the highlights contained in a specified range",
            "itemtype": "method",
            "name": "clearHightlightForRange",
            "params": [
                {
                    "name": "start",
                    "description": "Start of the range",
                    "type": "Number"
                },
                {
                    "name": "end",
                    "description": "End of the range",
                    "type": "Number"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "RawEditor",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/raw-editor.js",
            "line": 538,
            "description": "Given a list of locations, clear the linked highlight",
            "itemtype": "method",
            "name": "clearHighlightForLocations",
            "params": [
                {
                    "name": "[start, end], ...,[start, end]",
                    "description": "",
                    "type": "Array",
                    "optional": true
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "RawEditor",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/raw-editor.js",
            "line": 565,
            "description": "Whether an element is displayed as a block",
            "itemtype": "method",
            "name": "isDisplayedAsBlock",
            "params": [
                {
                    "name": "richNode",
                    "description": "Node to validate",
                    "type": "RichNode"
                }
            ],
            "return": {
                "description": "true iff the element is displayed as a block",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "RawEditor",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/raw-editor.js",
            "line": 580,
            "description": "Informs the consumer that the text was inserted at the given\nposition.\n\nOthers can set it on this component, but we are the only ones to\ncall it.",
            "params": [
                {
                    "name": "position",
                    "description": "Index of the inserted text.",
                    "type": "Number"
                },
                {
                    "name": "text",
                    "description": "Text content that has been inserted.",
                    "type": "String"
                }
            ],
            "class": "RawEditor",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/raw-editor.js",
            "line": 594,
            "description": "Insert text at provided position,",
            "itemtype": "method",
            "name": "insertText",
            "params": [
                {
                    "name": "text",
                    "description": "to insert",
                    "type": "String"
                },
                {
                    "name": "position",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "node",
                "type": "DOMNode"
            },
            "access": "public",
            "tagname": "",
            "class": "RawEditor",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/raw-editor.js",
            "line": 647,
            "description": "insert a component at the provided position",
            "itemtype": "method",
            "name": "insertComponent",
            "params": [
                {
                    "name": "position",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "componentName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "componentContent",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "componentID",
                "type": "String"
            },
            "access": "public",
            "tagname": "",
            "class": "RawEditor",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/raw-editor.js",
            "line": 669,
            "description": "remove a component",
            "itemtype": "method",
            "name": "removeComponent",
            "params": [
                {
                    "name": "componentID",
                    "description": "",
                    "type": "String"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "RawEditor",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/raw-editor.js",
            "line": 701,
            "description": "determines best suitable node to position caret in for provided rich node and position\ncreates a text node if necessary",
            "itemtype": "method",
            "name": "findSuitableNodeInRichNode",
            "params": [
                {
                    "name": "node",
                    "description": "",
                    "type": "RichNode"
                },
                {
                    "name": "position",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "RichNode"
            },
            "access": "private",
            "tagname": "",
            "class": "RawEditor",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/raw-editor.js",
            "line": 770,
            "description": "select a node based on the provided caret position, taking into account the current active node\nif no suitable node exists, create one (within reason)",
            "itemtype": "method",
            "name": "findSuitableNodeForPosition",
            "params": [
                {
                    "name": "position",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "node containing position or null if not found",
                "type": "RichNode"
            },
            "access": "private",
            "tagname": "",
            "class": "RawEditor",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/raw-editor.js",
            "line": 795,
            "description": "create a snapshot for undo history",
            "itemtype": "method",
            "name": "createSnapshot",
            "access": "public",
            "tagname": "",
            "class": "RawEditor",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/raw-editor.js",
            "line": 808,
            "itemtype": "method",
            "name": "updateRichNode",
            "access": "private",
            "tagname": "",
            "class": "RawEditor",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/raw-editor.js",
            "line": 817,
            "description": "restore a snapshot from undo history",
            "itemtype": "method",
            "name": "undo",
            "access": "public",
            "tagname": "",
            "class": "RawEditor",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/raw-editor.js",
            "line": 836,
            "itemtype": "method",
            "name": "moveCaretInTextNode",
            "params": [
                {
                    "name": "textNode",
                    "description": "",
                    "type": "TEXTNode"
                },
                {
                    "name": "position",
                    "description": "",
                    "type": "Number"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "RawEditor",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/raw-editor.js",
            "line": 852,
            "description": "get richnode matching a DOMNode",
            "itemtype": "method",
            "name": "getRichNodeFor",
            "params": [
                {
                    "name": "node",
                    "description": "",
                    "type": "DOMNode"
                }
            ],
            "return": {
                "description": "node",
                "type": "RichNode"
            },
            "access": "private",
            "tagname": "",
            "class": "RawEditor",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/raw-editor.js",
            "line": 867,
            "description": "execute a DOM transformation on the editor content, ensures a consistent editor state",
            "itemtype": "method",
            "name": "externalDomUpdate",
            "params": [
                {
                    "name": "description",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "domUpdate",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "maintainCursor,",
                    "description": "keep cursor in place if possible",
                    "type": "Boolean"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "RawEditor",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/raw-editor.js",
            "line": 904,
            "description": "update the selection based on dom window selection\nto be used when we are unsure what sort of input actually happened",
            "itemtype": "method",
            "name": "updateSelectionAfterComplexInput",
            "access": "private",
            "tagname": "",
            "class": "RawEditor",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/raw-editor.js",
            "line": 939,
            "description": "calculate the cursor position based on a richNode and an offset from a domRANGE\nsee https://developer.mozilla.org/en-US/docs/Web/API/Range/endOffset and\nhttps://developer.mozilla.org/en-US/docs/Web/API/Range/startOffset",
            "itemtype": "method",
            "name": "calculatePosition",
            "params": [
                {
                    "name": "node",
                    "description": "",
                    "type": "RichNode"
                },
                {
                    "name": "offset",
                    "description": "",
                    "type": "Number"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "RawEditor",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/raw-editor.js",
            "line": 970,
            "description": "set the carret position in the editor",
            "itemtype": "method",
            "name": "setCurrentPosition",
            "params": [
                {
                    "name": "position",
                    "description": "of the range",
                    "type": "Number"
                },
                {
                    "name": "notify",
                    "description": "observers, default true",
                    "type": "Boolean"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "RawEditor",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/raw-editor.js",
            "line": 1006,
            "description": "set the carret on the desired position. This function ensures a text node is present at the requested position",
            "itemtype": "method",
            "name": "setCarret",
            "params": [
                {
                    "name": "node,",
                    "description": "a text node or dom element",
                    "type": "DOMNode"
                },
                {
                    "name": "offset,",
                    "description": "for a text node the relative offset within the text node (i.e. number of characters before the carret).\n                        for a dom element the number of children before the carret.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "currentNode of the editor after the operation\nExamples:\n    to set the carret after 'c' in a textnode with text content 'abcd' use setCarret(textNode,3)\n    to set the carret after the end of a node with innerHTML `<b>foo</b><span>work</span>` use setCarret(element, 2) (e.g setCarret(element, element.children.length))\n    to set the carret after the b in a node with innerHTML `<b>foo</b><span>work</span>` use setCarret(element, 1) (e.g setCarret(element, indexOfChild + 1))\n    to set the carret after the start of a node with innerHTML `<b>foo</b><span>work</span>` use setCarret(element, 0)",
                "type": "DOMNode"
            },
            "access": "public",
            "tagname": "",
            "class": "RawEditor",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/raw-editor.js",
            "line": 1102,
            "description": "Pernet API\nTODO: remove these methods once plugins switched to the new editor",
            "class": "RawEditor",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/replace-text-with-html.js",
            "line": 5,
            "description": "Replaces text with html, updates DOM\nfinds the node that contains the whole rang\nfrom that node keeps children that are outside the range\nfor other children transforms textContent outside to range to new text nodes\nnew element is inserted in between\ne.g. <div><p>foo <span style=\"color:blue\">oooo ffff oooo</span>sss</p> currently becomes <div><p>foo oooo <div>new element</div>sss</p></div>\nTODO: transforming elements to text nodes could be improved by keeping the original element.",
            "itemtype": "method",
            "name": "replaceTextWithHtml",
            "params": [
                {
                    "name": "RichNode",
                    "description": "",
                    "type": "RichNode"
                },
                {
                    "name": "startIndex",
                    "description": "",
                    "type": "Int"
                },
                {
                    "name": "endIndex",
                    "description": "",
                    "type": "Int"
                },
                {
                    "name": "htmlString",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "inserted html as richNode",
                "type": "RichNode"
            },
            "class": "TextInputHandler",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/text-input-handler.js",
            "line": 21,
            "description": "tests this handler can handle the specified event",
            "itemtype": "method",
            "name": "isHandlerFor",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "DOMEvent"
                }
            ],
            "return": {
                "description": "boolean"
            },
            "access": "public",
            "tagname": "",
            "class": "TextInputHandler",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-contenteditable-editor/addon/utils/text-input-handler.js",
            "line": 37,
            "description": "handle the event",
            "itemtype": "method",
            "name": "handleEvent",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "DOMEvent"
                }
            ],
            "return": {
                "description": "response",
                "type": "HandlerResponse"
            },
            "class": "TextInputHandler",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor-plugin-system-dispatcher/app/services/rdfa-editor-dispatcher.js",
            "line": 27,
            "description": "Dispatch an event to all plugins of a given profile",
            "itemtype": "method",
            "name": "dispatch",
            "params": [
                {
                    "name": "profile",
                    "description": "Editor profile",
                    "type": "String"
                },
                {
                    "name": "hintsRegistryIndex",
                    "description": "Unique identifier of the event in the hints registry",
                    "type": "Object"
                },
                {
                    "name": "contexts",
                    "description": "RDFa contexts of the text snippets the event applies on",
                    "type": "Array"
                },
                {
                    "name": "hintsRegistry",
                    "description": "Registry of hints in the editor",
                    "type": "Object"
                },
                {
                    "name": "editor",
                    "description": "The RDFa editor instance",
                    "type": "Object"
                },
                {
                    "name": "Optional",
                    "description": "argument to contain extra info.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "A promise that resolves when the event has been dispatched to the plugins",
                "type": "Promise"
            },
            "class": "RdfaEditorDispatcher",
            "module": "contenteditable-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/components/document-structure.js",
            "line": 51,
            "description": "domNode to monitor",
            "itemtype": "property",
            "name": "node",
            "type": "DOMElement",
            "default": "null",
            "access": "public",
            "tagname": "",
            "class": "DocumentStructureComponent",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/components/document-structure.js",
            "line": 60,
            "description": "a MutationObserver on the specified node",
            "itemtype": "property",
            "name": "nodeObserver",
            "type": "MutationObserver",
            "access": "private",
            "tagname": "",
            "class": "DocumentStructureComponent",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/components/document-structure.js",
            "line": 68,
            "description": "predicate that verifies whether a node shoud be listed",
            "itemtype": "property",
            "name": "isInterestingNode",
            "type": "Function",
            "access": "public",
            "tagname": "",
            "class": "DocumentStructureComponent",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/components/document-structure.js",
            "line": 76,
            "description": "function that determines the label that should be displayed for a provided node",
            "itemtype": "property",
            "name": "labelForNode",
            "type": "Function",
            "access": "public",
            "tagname": "",
            "class": "DocumentStructureComponent",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/components/document-structure.js",
            "line": 84,
            "description": "whether the panel is collapsed",
            "itemtype": "property",
            "name": "isCollapsed",
            "type": "boolean",
            "access": "public",
            "tagname": "",
            "class": "DocumentStructureComponent",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/components/document-structure.js",
            "line": 123,
            "description": "filters the dom tree, only maintaining elements that match isInterestingNode",
            "itemtype": "method",
            "name": "buildStructure",
            "params": [
                {
                    "name": "node",
                    "description": "",
                    "type": "DOMNode"
                }
            ],
            "return": {
                "description": "Array"
            },
            "access": "private",
            "tagname": "",
            "class": "DocumentStructureComponent",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/components/editor-suggested-hints.js",
            "line": 11,
            "itemtype": "method",
            "name": "closeHints",
            "class": "RdfaEditorSuggestedHintsComponent",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/components/hints-registry-debugger.js",
            "line": 15,
            "description": "Hints registry to use for debugging",
            "itemtype": "property",
            "name": "hintsRegistry",
            "type": "HintsRegistry",
            "access": "public",
            "tagname": "",
            "class": "HintsRegistryDebugger",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/components/hints-registry-debugger.js",
            "line": 25,
            "description": "Hints currently stored in the hints registry",
            "itemtype": "property",
            "name": "hints",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "HintsRegistryDebugger",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/components/load-monitor.js",
            "line": 17,
            "description": "editor dispatcher",
            "itemtype": "property",
            "name": "rdfaEditorDispatcher",
            "type": "{Service}",
            "access": "private",
            "tagname": "",
            "class": "RdfaEditorLoadMonitor",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/components/load-monitor.js",
            "line": 25,
            "description": "plugins available in the dispatcher",
            "itemtype": "property",
            "name": "tasks",
            "type": "array",
            "access": "protected",
            "tagname": "",
            "class": "RdfaEditorLoadMonitor",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/components/load-monitor.js",
            "line": 33,
            "description": "is the editor working",
            "itemtype": "property",
            "name": "editorBusy",
            "type": "boolean",
            "access": "protected",
            "tagname": "",
            "class": "RdfaEditorLoadMonitor",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/components/load-monitor.js",
            "line": 44,
            "description": "is any plugin scheduled or running",
            "itemtype": "property",
            "name": "anyPluginBusy",
            "type": "boolean",
            "access": "protected",
            "tagname": "",
            "class": "RdfaEditorLoadMonitor",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/components/load-monitor.js",
            "line": 54,
            "description": "is the editor blocked or is any plugin running",
            "itemtype": "property",
            "name": "allBusy",
            "type": "boolean",
            "access": "protected",
            "tagname": "",
            "class": "RdfaEditorLoadMonitor",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/components/load-monitor.js",
            "line": 62,
            "description": "Total number of plugins available",
            "itemtype": "property",
            "name": "pluginsCount",
            "type": "number",
            "readony": "",
            "class": "RdfaEditorLoadMonitor",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/components/load-monitor.js",
            "line": 70,
            "description": "Number of plugins that are currently running or scheduled to run",
            "itemtype": "property",
            "name": "busyPluginsCount",
            "type": "number",
            "access": "protected",
            "tagname": "",
            "class": "RdfaEditorLoadMonitor",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/components/load-monitor.js",
            "line": 80,
            "description": "Plugins that are currently running or scheduled to run",
            "itemtype": "property",
            "name": "runningPlugins",
            "type": "Array",
            "access": "protected",
            "tagname": "",
            "class": "RdfaEditorLoadMonitor",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/components/rdfa-context-debugger.js",
            "line": 17,
            "description": "RDFa editor to debug in",
            "itemtype": "property",
            "name": "editor",
            "type": "RdfaEditor",
            "access": "public",
            "tagname": "",
            "class": "RdfaContextDebugger",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/components/rdfa-context-debugger.js",
            "line": 49,
            "description": "Analyse the RDFa context of a specified region",
            "itemtype": "method",
            "name": "analyse",
            "params": [
                {
                    "name": "start",
                    "description": "Start of the region",
                    "type": "Number"
                },
                {
                    "name": "end",
                    "description": "End of the region",
                    "type": "Number"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "RdfaContextDebugger",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/components/rdfa-context-debugger.js",
            "line": 68,
            "description": "Highlight the given region in the editor",
            "itemtype": "method",
            "name": "highlight",
            "params": [
                {
                    "name": "region",
                    "description": "Region to highlight",
                    "type": "[number, number]"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "RdfaContextDebugger",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/components/rdfa-editor-debugger.js",
            "line": 16,
            "description": "Objects used for debugging containing the hints registry, context scanner and editor",
            "itemtype": "property",
            "name": "debug",
            "type": "Object",
            "access": "public",
            "tagname": "",
            "class": "RdfaEditorDebugger",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/components/rdfa-editor-debugger.js",
            "line": 26,
            "description": "Whether the debug panel is enabled",
            "itemtype": "property",
            "name": "debugEnabled",
            "type": "boolean",
            "access": "public",
            "tagname": "",
            "class": "RdfaEditorDebugger",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/components/rdfa-editor-debugger.js",
            "line": 36,
            "description": "Currently active debug mode",
            "itemtype": "property",
            "name": "debugMode",
            "type": "string",
            "default": "'context-scanner'",
            "access": "public",
            "tagname": "",
            "class": "RdfaEditorDebugger",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/components/rdfa-editor-debugger.js",
            "line": 47,
            "description": "Available debug modes",
            "itemtype": "property",
            "name": "debugModes",
            "type": "Ember.Array",
            "access": "private",
            "tagname": "",
            "class": "RdfaEditorDebugger",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/components/rdfa-editor.js",
            "line": 39,
            "description": "Plugin profile of the RDFa editor",
            "itemtype": "property",
            "name": "profile",
            "type": "string",
            "default": "'default'",
            "access": "public",
            "tagname": "",
            "class": "RdfaEditorComponent",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/components/rdfa-editor.js",
            "line": 50,
            "description": "Function accepting a debug object containing the components used for debugging\n  (e.g. hints registry, context scanner, editor)",
            "itemtype": "property",
            "name": "initDebug",
            "type": "function",
            "access": "public",
            "tagname": "",
            "class": "RdfaEditorComponent",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/components/rdfa-editor.js",
            "line": 60,
            "itemtype": "property",
            "name": "rdfaEditorDispatcher",
            "type": "RdfaEditorDispatcher",
            "access": "private",
            "tagname": "",
            "class": "RdfaEditorComponent",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/components/rdfa-editor.js",
            "line": 68,
            "itemtype": "property",
            "name": "eventProcessor",
            "type": "EventProcessor",
            "access": "private",
            "tagname": "",
            "class": "RdfaEditorComponent",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/components/rdfa-editor.js",
            "line": 76,
            "itemtype": "property",
            "name": "hinstRegistry",
            "type": "HintsRegistry",
            "access": "private",
            "tagname": "",
            "class": "RdfaEditorComponent",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/components/rdfa-editor.js",
            "line": 84,
            "itemtype": "property",
            "name": "hasHints",
            "type": "boolean",
            "access": "private",
            "tagname": "",
            "class": "RdfaEditorComponent",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/components/rdfa-editor.js",
            "line": 92,
            "itemtype": "property",
            "name": "hasActiveHints",
            "type": "boolean",
            "access": "private",
            "tagname": "",
            "class": "RdfaEditorComponent",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/components/rdfa-editor.js",
            "line": 100,
            "itemtype": "property",
            "name": "hasSuggestedHints",
            "class": "RdfaEditorComponent",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/components/rdfa-editor.js",
            "line": 105,
            "description": "Contains extra handlers for input events on the editor.",
            "itemtype": "property",
            "name": "handlers",
            "type": "Ember.A",
            "access": "private",
            "tagname": "",
            "class": "RdfaEditorComponent",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/components/rdfa-editor.js",
            "line": 126,
            "description": "This function is called when an action is fired on the editor,\nbefore the editor itself has been set up.  When this happens, we\ncan't dispatch the action to the correct component.",
            "itemtype": "method",
            "name": "warnNotSetup",
            "access": "private",
            "tagname": "",
            "class": "RdfaEditorComponent",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/components/rdfa-editor.js",
            "line": 138,
            "description": "This is called in cases where an optional action is triggered\nfrom the frontend.  This noop can be called as a fallback in case no operation\nneeds to occur if the action is not defined.",
            "itemtype": "method",
            "name": "noop",
            "class": "RdfaEditorComponent",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/components/rdfa-editor.js",
            "line": 147,
            "description": "Handle init of rawEditor",
            "itemtype": "method",
            "name": "handleRawEditorInit",
            "params": [
                {
                    "name": "editor,",
                    "description": "the editor interface",
                    "type": "RawEditor"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "RdfaEditorComponent",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/components/rdfa-editor.js",
            "line": 197,
            "description": "Highlights a node for a short time span and scrolls to it",
            "itemtype": "method",
            "name": "highlightStructuredItem",
            "params": [
                {
                    "name": "node",
                    "description": "Node to highlight and scroll to",
                    "type": "DOMNode"
                }
            ],
            "class": "RdfaEditorComponent",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/components/rdfa-editor.js",
            "line": 212,
            "description": "requests hints from plugins",
            "itemtype": "method",
            "name": "triggerHints",
            "class": "RdfaEditorComponent",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/utils/bold-property.js",
            "line": 15,
            "description": "is bold property enabled on the provided richnode?",
            "itemtype": "method",
            "name": "enabledAt",
            "params": [
                {
                    "name": "richNode",
                    "description": "",
                    "type": "RichNode"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "BoldProperty",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/utils/event-processor.js",
            "line": 18,
            "itemtype": "property",
            "name": "registry",
            "type": "HintsRegistry",
            "class": "EventProcessor",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/utils/event-processor.js",
            "line": 28,
            "description": "this is the range spanning all text inserts as recorded between two dispatchAndAnalyse calls",
            "itemtype": "property",
            "name": "modifiedRange",
            "type": "Array",
            "class": "EventProcessor",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/utils/event-processor.js",
            "line": 36,
            "itemtype": "property",
            "name": "editor",
            "type": "RdfaEditor",
            "class": "EventProcessor",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/utils/event-processor.js",
            "line": 42,
            "itemtype": "property",
            "name": "profile",
            "type": "string",
            "class": "EventProcessor",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/utils/event-processor.js",
            "line": 48,
            "itemtype": "property",
            "name": "dispatcher",
            "type": "EditorDispatcher",
            "class": "EventProcessor",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/utils/event-processor.js",
            "line": 71,
            "itemtype": "method",
            "name": "updateModifiedRange",
            "params": [
                {
                    "name": "start",
                    "description": "start index of the update operation",
                    "type": "Number"
                },
                {
                    "name": "end",
                    "description": "end index of the update operation",
                    "type": "Number"
                },
                {
                    "name": "isRemove",
                    "description": "whether this is a remove or insert operation",
                    "type": "Boolean"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "EventProcessor",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/utils/event-processor.js",
            "line": 123,
            "description": "Observer of the registry updating the highlighted hints in the editor",
            "itemtype": "method",
            "name": "handleRegistryChange",
            "params": [
                {
                    "name": "registry",
                    "description": "",
                    "type": "Ember.Array"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "EventProcessor",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/utils/event-processor.js",
            "line": 152,
            "description": "Analyses the RDFa context and trigger hint updates through the editor dispatcher\nbased on the RDFa context and the current text in the editor",
            "itemtype": "method",
            "name": "analyseAndDispatch",
            "params": [
                {
                    "name": "@param",
                    "description": "Optional argument to contain extra info.",
                    "type": "Array"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "EventProcessor",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/utils/event-processor.js",
            "line": 179,
            "description": "Remove text in the specified range and trigger updating of the hints",
            "itemtype": "method",
            "name": "removeText",
            "params": [
                {
                    "name": "start",
                    "description": "Start of the text range",
                    "type": "Number"
                },
                {
                    "name": "end",
                    "description": "End of the text range",
                    "type": "Number"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "EventProcessor",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/utils/event-processor.js",
            "line": 194,
            "description": "Insert text starting at the specified location and trigger updating of the hints",
            "itemtype": "method",
            "name": "insertText",
            "params": [
                {
                    "name": "start",
                    "description": "Start of the text range",
                    "type": "Number"
                },
                {
                    "name": "text",
                    "description": "Text to insert",
                    "type": "String"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "EventProcessor",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/utils/event-processor.js",
            "line": 209,
            "description": "Handling the change of the current selected text/location in the editor",
            "itemtype": "method",
            "name": "selectionChanged",
            "access": "public",
            "tagname": "",
            "class": "EventProcessor",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/utils/hints-registry.js",
            "line": 15,
            "itemtype": "property",
            "name": "index",
            "type": "Array",
            "class": "HintsRegistry",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/utils/hints-registry.js",
            "line": 21,
            "itemtype": "property",
            "name": "registry",
            "type": "Array",
            "class": "HintsRegistry",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/utils/hints-registry.js",
            "line": 27,
            "itemtype": "property",
            "name": "activeRegion",
            "type": "Array",
            "class": "HintsRegistry",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/utils/hints-registry.js",
            "line": 33,
            "itemtype": "property",
            "name": "activeHints",
            "type": "Array",
            "class": "HintsRegistry",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/utils/hints-registry.js",
            "line": 44,
            "itemtype": "property",
            "name": "registryObservers",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "HintsRegistry",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/utils/hints-registry.js",
            "line": 62,
            "description": "adds a registry observer callback",
            "itemtype": "method",
            "name": "addRegistryObserver",
            "params": [
                {
                    "name": "callback",
                    "description": "to be executed when the registry is updated. Will receive the complete registry as a parameter.",
                    "type": "Function"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "HintsRegistry",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/utils/hints-registry.js",
            "line": 84,
            "description": "Handles an insert text event from the editor.\nReturns the associated registry index.",
            "itemtype": "method",
            "name": "insertText",
            "params": [
                {
                    "name": "start",
                    "description": "Start index in de string array",
                    "type": "Number"
                },
                {
                    "name": "content",
                    "description": "Content of the insertion",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Index object of the registry.\n                Consists of:\n                - idx: id of the index object\n                - operation:  'remove' || 'insert'\n                - delta: delta length of insertion || removal\n                - startIdx: start index string array\n                - endIdx: end index string array",
                "type": "Object"
            },
            "access": "public",
            "tagname": "",
            "class": "HintsRegistry",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/utils/hints-registry.js",
            "line": 109,
            "description": "Handles removal text event from the editor.\nReturns the associated registry index.",
            "itemtype": "method",
            "name": "removeText",
            "params": [
                {
                    "name": "start",
                    "description": "Start index of the removed string array",
                    "type": "Number"
                },
                {
                    "name": "end",
                    "description": "End index of the removed string array",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Index object of the registry.\n                Consists of:\n                - idx: id of the index object\n                - operation:  'remove' || 'insert'\n                - delta: delta length of insertion || removal\n                - startIdx: start index string array\n                - endIdx: end index string array",
                "type": "Object"
            },
            "access": "public",
            "tagname": "",
            "class": "HintsRegistry",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/utils/hints-registry.js",
            "line": 136,
            "description": "Returns hints exactly at a provided location.",
            "itemtype": "method",
            "name": "getHintsAtLocation",
            "params": [
                {
                    "name": "location",
                    "description": "[start, end] of the location",
                    "type": "[number, number]"
                },
                {
                    "name": "hrIdx",
                    "description": "Index of the registry else registry at current index is provided",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "who",
                    "description": "Name of the plugin to filter on",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "Array of hints",
                "type": "Array"
            },
            "access": "public",
            "tagname": "",
            "class": "HintsRegistry",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/utils/hints-registry.js",
            "line": 166,
            "description": "Returns hints in a provided region.",
            "itemtype": "method",
            "name": "getHintsInRegion",
            "params": [
                {
                    "name": "region",
                    "description": "[start, end]",
                    "type": "Array"
                },
                {
                    "name": "hrIdx",
                    "description": "Index of the registry else registry at current index is provided",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "who",
                    "description": "Name of the plugin to filter on",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "Array of hints",
                "type": "Array"
            },
            "access": "public",
            "tagname": "",
            "class": "HintsRegistry",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/utils/hints-registry.js",
            "line": 196,
            "description": "Removes hints at an exact location.",
            "itemtype": "method",
            "name": "removeHintsAtLocation",
            "params": [
                {
                    "name": "location",
                    "description": "[start, end]",
                    "type": "Array"
                },
                {
                    "name": "hrIdx",
                    "description": "Index of the registry else registry at current index is provided",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "who",
                    "description": "Name of the plugin to filter on",
                    "type": "String",
                    "optional": true
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "HintsRegistry",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/utils/hints-registry.js",
            "line": 238,
            "description": "Removes hints in a region.",
            "itemtype": "method",
            "name": "removeHintsInRegion",
            "params": [
                {
                    "name": "region",
                    "description": "[start, end]",
                    "type": "Array"
                },
                {
                    "name": "hrIdx",
                    "description": "Index of the registry else registry at current index is provided",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "who",
                    "description": "Name of the plugin to filter on",
                    "type": "String",
                    "optional": true
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "HintsRegistry",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/utils/hints-registry.js",
            "line": 279,
            "description": "This function executes multiple hints updates as a batch.\nWHY\n---\na. decrease the amount of dead DOMNodes when updating highlights\nb. potential performance gain.\n\nWARNING\n-------\nExperimental, so probably will change",
            "class": "HintsRegistry",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/utils/hints-registry.js",
            "line": 338,
            "description": "Adds collection of hints.",
            "itemtype": "method",
            "name": "addHints",
            "params": [
                {
                    "name": "hrIdx",
                    "description": "Index of the registry",
                    "type": "Object"
                },
                {
                    "name": "who",
                    "description": "Name of the plugin",
                    "type": "String"
                },
                {
                    "name": "Array",
                    "description": "Hints to add",
                    "type": "Array"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "HintsRegistry",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/utils/hints-registry.js",
            "line": 360,
            "description": "Provided a location and hrId, give back the current location for the actual state of the registry.",
            "itemtype": "method",
            "name": "updateLocationToCurrentIndex",
            "params": [
                {
                    "name": "hrIdx",
                    "description": "Index of the registry",
                    "type": "Object"
                },
                {
                    "name": "location",
                    "description": "[start, end]",
                    "type": "[number, number]"
                }
            ],
            "return": {
                "description": "mapped location [start, end]",
                "type": "[number, number]"
            },
            "access": "public",
            "tagname": "",
            "class": "HintsRegistry",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/utils/hints-registry.js",
            "line": 376,
            "description": "Gets next index id.",
            "itemtype": "method",
            "name": "nextIndexId",
            "return": {
                "description": "The next index id",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": "HintsRegistry",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/utils/hints-registry.js",
            "line": 392,
            "description": "Gets current index.",
            "itemtype": "method",
            "name": "currentIndex",
            "return": {
                "description": "The current index",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "HintsRegistry",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/utils/hints-registry.js",
            "line": 405,
            "description": "Inits index entry object.",
            "itemtype": "method",
            "name": "initIndexEntry",
            "return": {
                "description": "Index entry",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "HintsRegistry",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/utils/hints-registry.js",
            "line": 419,
            "description": "Appends index entry to index.",
            "itemtype": "method",
            "name": "appendToIndex",
            "access": "private",
            "tagname": "",
            "class": "HintsRegistry",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/utils/hints-registry.js",
            "line": 430,
            "description": "Updates collection of cards with collection of index entries.\nTODO: clean up",
            "itemtype": "method",
            "name": "applyIndexesToCards",
            "access": "private",
            "tagname": "",
            "class": "HintsRegistry",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/utils/hints-registry.js",
            "line": 452,
            "description": "Updates card with collection of indexes\nTODO: clean up",
            "itemtype": "method",
            "name": "applyIndexesToCard",
            "params": [
                {
                    "name": "indexes",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "card",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "HintsRegistry",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/utils/hints-registry.js",
            "line": 486,
            "description": "Updates card registry with provided index entry.",
            "itemtype": "method",
            "name": "updateRegistry",
            "params": [
                {
                    "name": "indexEntry",
                    "description": "",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "HintsRegistry",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/utils/hints-registry.js",
            "line": 502,
            "description": "Checks whether a location is valid.",
            "itemtype": "method",
            "name": "isLocationValid",
            "params": [
                {
                    "name": "location",
                    "description": "",
                    "type": "[number, number]"
                }
            ],
            "return": {
                "description": "Whether the location is valid",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "HintsRegistry",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/utils/hints-registry.js",
            "line": 520,
            "description": "Given an index entry, check whether it affects location.",
            "itemtype": "method",
            "name": "doesLocationChange",
            "params": [
                {
                    "name": "location",
                    "description": "",
                    "type": "[number, number]"
                },
                {
                    "name": "index",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Whether the location is affected by the given index entry",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "HintsRegistry",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/utils/hints-registry.js",
            "line": 539,
            "description": "Given an index entry, check wether the location moves as block to left or right.",
            "itemtype": "method",
            "name": "doesLocationShiftsAsBlock",
            "params": [
                {
                    "name": "location",
                    "description": "",
                    "type": "[number, number]"
                },
                {
                    "name": "index",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Whether the location shifts as block",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "HintsRegistry",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/utils/hints-registry.js",
            "line": 567,
            "description": "Given an index entry, update the location.\nNote: might give an invalid location back",
            "itemtype": "method",
            "name": "updateLocationWithIndex",
            "params": [
                {
                    "name": "location",
                    "description": "Location to update",
                    "type": "[number, number]"
                },
                {
                    "name": "index",
                    "description": "Index entry to update the location with",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Updated location based on the index entry",
                "type": "[number, number]"
            },
            "access": "private",
            "tagname": "",
            "class": "HintsRegistry",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/utils/hints-registry.js",
            "line": 599,
            "description": "Given an index entry and a card, pull the card through the remaining index entries\nto update the registy correctly.",
            "itemtype": "method",
            "name": "updateCardToCurrentIndex",
            "params": [
                {
                    "name": "idx",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "card",
                    "description": "",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "HintsRegistry",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/utils/hints-registry.js",
            "line": 624,
            "description": "Given an index entry, give back the remaining index entries which lead to the head of the index.",
            "itemtype": "method",
            "name": "getRemainingIndexes",
            "params": [
                {
                    "name": "indexEntry",
                    "description": "",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "HintsRegistry",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/utils/hints-registry.js",
            "line": 638,
            "description": "Update the registry and notify observers",
            "itemtype": "method",
            "name": "updateRegistryAndNotify",
            "params": [
                {
                    "name": "registry",
                    "description": "",
                    "type": "Ember.Array"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "HintsRegistry",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/utils/hints-registry.js",
            "line": 652,
            "description": "send registry to registry observers",
            "params": [
                {
                    "name": "registry",
                    "description": "",
                    "type": "Array"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "HintsRegistry",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/utils/italic-property.js",
            "line": 15,
            "description": "is italic property enabled on the provided richnode?",
            "itemtype": "method",
            "name": "enabledAt",
            "params": [
                {
                    "name": "UNKNOWN",
                    "description": "",
                    "type": "RichNode"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "ItalicProperty",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/utils/rdfa-backspace-handler.js",
            "line": 16,
            "description": "handle backspace event on rdfa content",
            "itemtype": "method",
            "name": "handleEvent",
            "return": {
                "description": "",
                "type": "HandlerResponse"
            },
            "access": "public",
            "tagname": "",
            "class": "RdfaBackspaceHandler",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/utils/rdfa-backspace-handler.js",
            "line": 43,
            "description": "handles state of parent rdfa node\nwill return true if backspace needs to be avoided.",
            "itemtype": "method",
            "name": "setDataFlaggedForNode",
            "params": [
                {
                    "name": "textNode",
                    "description": "",
                    "type": "DomNode"
                }
            ],
            "return": {
                "description": "can parentNode be removed",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "RdfaBackspaceHandler",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/utils/rdfa-backspace-handler.js",
            "line": 71,
            "description": "returns true if the node is flagged for removal",
            "itemtype": "method",
            "name": "isFlaggedForRemoval",
            "params": [
                {
                    "name": "textNode",
                    "description": "",
                    "type": "DomNode"
                }
            ],
            "return": {
                "description": "",
                "type": "Bool"
            },
            "access": "private",
            "tagname": "",
            "class": "RdfaBackspaceHandler",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/utils/rdfa-backspace-handler.js",
            "line": 82,
            "description": "returns true if rdfa node",
            "itemtype": "method",
            "name": "isRdfaNode",
            "params": [
                {
                    "name": "textNode",
                    "description": "",
                    "type": "DomNode"
                }
            ],
            "return": {
                "description": "",
                "type": "Bool"
            },
            "access": "private",
            "tagname": "",
            "class": "RdfaBackspaceHandler",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/utils/rdfa-rich-node-helpers.js",
            "line": 9,
            "description": "Get the RDFa attributes of a DOM node",
            "itemtype": "method",
            "name": "getRdfaAttributes",
            "params": [
                {
                    "name": "domNode",
                    "description": "DOM node to get the RDFa attributes from",
                    "type": "Node"
                }
            ],
            "return": {
                "description": "Map of RDFa attributes key-value pairs",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "UnderlineProperty",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/utils/rdfa-rich-node-helpers.js",
            "line": 38,
            "description": "Enrich a rich node recursively with its RDFa attributes",
            "itemtype": "method",
            "name": "enrichRichNodeWithRdfa",
            "params": [
                {
                    "name": "richNode",
                    "description": "Rich node to enrich with its RDFa attributes",
                    "type": "RichNode"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "UnderlineProperty",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/utils/rdfa-rich-node-helpers.js",
            "line": 58,
            "description": "Returns whether a given RDFa attributes object is empty. This means no RDFa statement is set.",
            "itemtype": "method",
            "name": "isEmptyRdfaAttributes",
            "params": [
                {
                    "name": "rdfaAttributes",
                    "description": "An RDFa attributes object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Whether the given RDFa attributes object is empty.",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "UnderlineProperty",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/utils/scoped-method.js",
            "line": 3,
            "description": "Binds a method of an Ember.Object so it can be deeply referenced in\nother components.\n\nWhen would you need this?  When passing functions through to other\ncomponents, you should wrap them in an action helper.  However,\nwhen passing methods this way, their scope is being changed.  The\nmethod will therefore run in a different scope.\n\nExample use:\n\n    Ember.Object.extend( {\n      value: 100,\n      increaseValue: scoped( function(amount) {\n        this.set( 'value', amount + this.value );\n        return this.value;\n      })\n    });\n\nIn a component where this would have value:\n\n    {{something-embedded someReference.thatObject.increaseValue}}",
            "class": "UnderlineProperty",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/ember-rdfa-editor/addon/utils/text-input-data-flagged-remove-handler.js",
            "line": 6,
            "description": "tests this handler can handle the specified event",
            "itemtype": "method",
            "name": "isHandlerFor",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "DOMEvent"
                }
            ],
            "return": {
                "description": "boolean"
            },
            "access": "public",
            "tagname": "",
            "class": "UnderlineProperty",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/marawa/test/helpers.js",
            "line": 4,
            "description": "Calls JSDOM to create a new DOM tree.\n\nUse dom.window.document.querySelector to get contents from the DOM\ntree.",
            "class": "NodeWalker",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/marawa/test/helpers.js",
            "line": 14,
            "description": "Makes it easy to retrieve a parsed DOM element.\n\n- string string The HTML of the element you want returned.  Note\n  that this will be placed inside of a div, hence the elements must\n  be valid within that.\n\n- id string DOM ID of the wrapper element.  Override if this may\n  overlap with the identifiers in your snippet",
            "class": "NodeWalker",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/marawa/test/helpers.js",
            "line": 30,
            "description": "Creates a DOM element from the supplied string, using\n#makeDomElement and parses it using #analyse.\n\n- string string HTML string to be turned into DOM and parsed.\n\n- id string DOM ID of the wrapper element.  Override if this may\n  overlap with the identifiers in your snippet",
            "class": "NodeWalker",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/marawa/dom-helpers.js",
            "line": 14,
            "description": "Finds the first dom node with the supplied type",
            "itemtype": "method",
            "name": "findFirstNodeOfType",
            "params": [
                {
                    "name": "DomNode",
                    "description": "Highest level DOM node",
                    "type": "DomNode"
                },
                {
                    "name": "type",
                    "description": "URI of the type which should be matched",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Dom Node which has the correct type",
                "type": "DomNode"
            },
            "class": "NodeWalker",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/marawa/dom-helpers.js",
            "line": 37,
            "description": "Finds all dom nodes with the supplied type",
            "itemtype": "method",
            "name": "findAllNodesOfType",
            "params": [
                {
                    "name": "DomNode",
                    "description": "Highest level DOM node",
                    "type": "DomNode"
                },
                {
                    "name": "type",
                    "description": "URI of the type which should be matched",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Dom Nodes which have the correct type",
                "type": "[DomNode]"
            },
            "class": "NodeWalker",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/marawa/node-walker.js",
            "line": 24,
            "description": "dom helper to check whether a node is a \"void element\"\nhttps://www.w3.org/TR/html/syntax.html#void-elements",
            "itemtype": "method",
            "name": "isVoidElement",
            "static": 1,
            "params": [
                {
                    "name": "node",
                    "description": "",
                    "type": "DOMNode"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "access": "public",
            "tagname": "",
            "class": "NodeWalker",
            "module": "rdfa-editor"
        },
        {
            "file": "node_modules/@lblod/marawa/node-walker.js",
            "line": 68,
            "description": "Processes a single dom node.",
            "class": "NodeWalker",
            "module": "editor-core"
        },
        {
            "file": "node_modules/@lblod/marawa/node-walker.js",
            "line": 98,
            "description": "Called when stepping into a child Dom node",
            "class": "NodeWalker",
            "module": "editor-core"
        },
        {
            "file": "node_modules/@lblod/marawa/node-walker.js",
            "line": 108,
            "description": "Steps from one (or no) child node to the next.",
            "class": "NodeWalker",
            "module": "editor-core"
        },
        {
            "file": "node_modules/@lblod/marawa/node-walker.js",
            "line": 126,
            "description": "Called when finishing the processing of all the child nodes.",
            "class": "NodeWalker",
            "module": "editor-core"
        },
        {
            "file": "node_modules/@lblod/marawa/node-walker.js",
            "line": 137,
            "description": "Processes a single rich text node",
            "class": "NodeWalker",
            "module": "editor-core"
        },
        {
            "file": "node_modules/@lblod/marawa/node-walker.js",
            "line": 152,
            "description": "Processes a single rich tag",
            "class": "NodeWalker",
            "module": "editor-core"
        },
        {
            "file": "node_modules/@lblod/marawa/node-walker.js",
            "line": 180,
            "description": "Processes a void tag node.\n\nCurrently has support for two common types of nodes: IMG and BR.\nThe BR is replaced by a \"\\n\" symbol.  Other tags are currently\nreplaced by a space.\n\nTODO: This code path is experimental.  We know this may cause\nvarious problems and intend to remove it.",
            "class": "NodeWalker",
            "module": "editor-core"
        },
        {
            "file": "node_modules/@lblod/marawa/node-walker.js",
            "line": 206,
            "description": "Processes a single comment node",
            "class": "NodeWalker",
            "module": "editor-core"
        },
        {
            "file": "node_modules/@lblod/marawa/node-walker.js",
            "line": 218,
            "description": "Detects the type of a DOM node",
            "class": "NodeWalker",
            "module": "editor-core"
        },
        {
            "file": "node_modules/@lblod/marawa/node-walker.js",
            "line": 234,
            "description": "Creates a rich node.\n\nYou can override this method in order to add content to\nthe rich text nodes.",
            "class": "NodeWalker",
            "module": "editor-core"
        },
        {
            "file": "node_modules/@lblod/marawa/rdfa-block.js",
            "line": 77,
            "description": "Returns the absolute region based on the RDFa block region and a given relative region",
            "itemtype": "method",
            "name": "normalizeRegion",
            "params": [
                {
                    "name": "start, end",
                    "description": "Relative region offsets",
                    "type": "[int,int]",
                    "optional": true
                }
            ],
            "return": {
                "description": "[start, end] Absolute region offsets",
                "type": "[int,int]"
            },
            "class": "RdfaBlock",
            "module": "editor-core"
        },
        {
            "file": "node_modules/@lblod/marawa/rdfa-context-scanner.js",
            "line": 49,
            "description": "Analyse the RDFa contexts of a specific region in a text",
            "itemtype": "method",
            "name": "analyse",
            "params": [
                {
                    "name": "domNode",
                    "description": "Root DOM node containing the text",
                    "type": "Node"
                },
                {
                    "name": "region",
                    "description": "Region in the text for which RDFa contexts must be calculated.\n                                Full region if start or end is undefined.",
                    "type": "[number,number]"
                }
            ],
            "return": {
                "description": "Array of RDFa blocks representing the RDFa context of the given region in a given DOM node.\n                It's important to note that the resulting RDFa blocks might span a broader range than the requested range\n                when the nodes at the border of the range can be combined with non-logical blocks falling outside the range.\n\n                The properties of an RDFa block are documented in the RdfaBlock class.\n\n                The rich nodes (and their trees) in the RDFa blocks are enriched with the following semantic properties:\n                - rdfaPrefixes: map of prefixes at the current node\n                - rdfaAttributes: resolved (= non-prefixed) RDFa attributes set on the node\n                - rdfaContext: array of rdfaAttributes from the top to the current node\n                - isLogicalBlock: whether the individual node represents a logical block of content\n                - rdfaBlocks[]: array of RDFa blocks representing the RDFa context at the current node",
                "type": "[RdfaBlock]"
            },
            "access": "public",
            "tagname": "",
            "class": "RdfaContextScanner",
            "module": "editor-core"
        },
        {
            "file": "node_modules/@lblod/marawa/rdfa-context-scanner.js",
            "line": 107,
            "description": "Calculate the RDFa context from a given node to the top of the document\nI.e. resolve prefixes and augment RDFa context based on the prefixes and RDFa context of its parent",
            "itemtype": "method",
            "name": "calculateRdfaToTop",
            "params": [
                {
                    "name": "richNode",
                    "description": "Rich node to start from",
                    "type": "RichNode"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "RdfaContextScanner",
            "module": "editor-core"
        },
        {
            "file": "node_modules/@lblod/marawa/rdfa-context-scanner.js",
            "line": 143,
            "description": "Recursively expands the RDFa context of the inner nodes of a rich node\nI.e. resolve prefixes and augment RDFa context based on the prefixes and RDFa context of its parent",
            "itemtype": "method",
            "name": "calculateInnerRdfa",
            "params": [
                {
                    "name": "richNode",
                    "description": "Rich node to start from",
                    "type": "RichNode"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "RdfaContextScanner",
            "module": "editor-core"
        },
        {
            "file": "node_modules/@lblod/marawa/rdfa-context-scanner.js",
            "line": 165,
            "description": "Flatten and reduce a rich node RDFa tree to an array of RDFa blocks.\nAn RDFa block represents a combination of one or more leaf rich nodes\nthat share the same semantics (in terms of RDFa as well as in terms of display).\nOnly RDFa blocks (partially) falling in a specified region are returned.\n\nIt is the goal to yield a flattened tree of RDFa statements.\nCombining as many of them as possible.  Some examples on how we\nintend to combine nodes will explain the intent better than a\nlong description.  The following cases represent a DOM tree.  The\no represents a tag which doesn't contain semantic content and\nwhich in itself isn't rendered as a block.  The l represents a\nlogical block, these are blocks which render as a visually\nseparate block in html or which contain semantic content.  When\nmoving upward, we want to combine adjacent non-logical blocks.\nWhen combining the blocks, we represent a non-mergeable RDFa block\nby putting parens around it. In code that is reflected by the isRdfaBlock property.\n\nFor the two examples below, we explain the logic under the\ndrawing.\n\n\n 1:        o      <-  (l) (oo) o (l)\n          / \\\n 2:      l   o    <-  l = (l) (oo)  o = o l\n        /|\\  |\\\n 3:    l o o o l\n\n     -> l oo o l <-\n\nAt the lowest level of nodes (3), we notice there's a logical\nblock, followed by two inline blocks.  The two inline blocks can\nbe combined.  Moving one level up (2), we see that these three\nblocks are composed within a logical block.  Hence we can't\nfurther combine the (oo) statement further up the hierarchy.\nMoving to the right, we see an o and an l, which can't be further\ncombined.\n\n -> (l) (o o) o l <-\n\n 1:        o      <-  (l) ooo (l)\n          / \\\n 2:      o   o    <-  l = (l) oo   o = o (l)\n        /|\\  |\\\n 3:    l o o o l\n\n     -> l ooo l <-\n\nThis case is different from the previous case.  On level 3, in\nthe left, we combine l o o to represent (l) oo.  The two\nnon-logical blocks can be combined.  As we move these to a level\nup (2), we're still left with one logical block, and two\nnon-logical blocks.  The right of level 3 consists of o l.  These\ntoo are stored in a non-logical block.  Hence we can combine them\nto represent o (l).  Combining further at the top level (1), we\ncan combine all the three o as non of them is a logical block.\nBecause level 1 itself isn't a logical block either, we don't put\nthem between parens.  Hence, we end up with the blocks l ooo l.",
            "itemtype": "method",
            "name": "flattenRdfaTree",
            "params": [
                {
                    "name": "richNode",
                    "description": "Rich node to flatten",
                    "type": "RichNode"
                },
                {
                    "name": "region",
                    "description": "Region in the text for which RDFa nodes must be returned",
                    "type": "[number,number]"
                }
            ],
            "return": {
                "description": "Array of RDFa blocks falling in a specified region",
                "type": "[RdfaBlock]"
            },
            "access": "private",
            "tagname": "",
            "class": "RdfaContextScanner",
            "module": "editor-core"
        },
        {
            "file": "node_modules/@lblod/marawa/rdfa-context-scanner.js",
            "line": 292,
            "description": "Get an array of (combined) RDFa nodes for the supplied richNode.\nTakes into account the properties of the richNode, and the\npreviously calculated rdfaNodeList of the children.",
            "itemtype": "method",
            "name": "getRdfaNodeList",
            "params": [
                {
                    "name": "richNode",
                    "description": "The node for which to return the rdfaNodeList.",
                    "type": "RichNode"
                }
            ],
            "return": {
                "description": "Array of rdfaBlock items.",
                "type": "[RdfaBlock]"
            },
            "access": "private",
            "tagname": "",
            "class": "RdfaContextScanner",
            "module": "editor-core"
        },
        {
            "file": "node_modules/@lblod/marawa/rdfa-context-scanner.js",
            "line": 323,
            "description": "Returns an array of rdfaBlock items for the supplied richNode,\nassuming that is a text node.",
            "itemtype": "method",
            "name": "createRdfaBlocksFromText",
            "params": [
                {
                    "name": "richNode",
                    "description": "The text node for which to return the\nrdfa blocks.",
                    "type": "RichNode"
                }
            ],
            "return": {
                "description": "Array of rdfaBlock items.",
                "type": "[RdfaBlock]"
            },
            "access": "private",
            "tagname": "",
            "class": "RdfaContextScanner",
            "module": "editor-core"
        },
        {
            "file": "node_modules/@lblod/marawa/rdfa-context-scanner.js",
            "line": 352,
            "description": "Returns an array of RDFa block for the supplied richNode,\nassuming that is a tag node.\n\nIf the tag node doesn't have children, i.e. it's an empty tag\nwithout text, a new RDFa block is created for the empty rich node.\n\nIf the tag node has children, the idea is to first get\nthe RDFa blocks from each of our children\nand put them in a flat list.  We only need to check the first and\nlast children for combination, but we're lazy and try to combine\neach of them if they don't have a different meaning logically.\nNext we possibly overwrite the isRdfaBlock property, based on the\nproperty of our own richNode.  If we are an rdfaBlock, none of\nour children is still allowed to be combined after we ran the\ncombinator.",
            "itemtype": "method",
            "name": "createRdfaBlocksFromTag",
            "params": [
                {
                    "name": "richNode",
                    "description": "RichNode for which the rdfaBlock items\nwill be returned.",
                    "type": "RichNode"
                }
            ],
            "return": {
                "description": "Array of rdfaBlock items for this tag.",
                "type": "[RdfaBlock]"
            },
            "access": "private",
            "tagname": "",
            "class": "RdfaContextScanner",
            "module": "editor-core"
        },
        {
            "file": "node_modules/@lblod/marawa/rdfa-context-scanner.js",
            "line": 418,
            "description": "Combines an array of RDFa blocks based on their properties.\nRDFa blocks are combined if they don't have a logical different meaning.",
            "itemtype": "method",
            "name": "combineRdfaBlocks",
            "params": [
                {
                    "name": "nodes",
                    "description": "Set of RDFa blocks we'll try to combine",
                    "type": "[RdfaBlock]"
                }
            ],
            "return": {
                "description": "Array of RDFa blocks after the combineable\nones were combined.",
                "type": "[RdfaBlock]"
            },
            "access": "private",
            "tagname": "",
            "class": "RdfaContextScanner",
            "module": "editor-core"
        },
        {
            "file": "node_modules/@lblod/marawa/rdfa-context-scanner.js",
            "line": 486,
            "description": "Returns a shallow clone of the supplied object",
            "params": [
                {
                    "name": "rdfaBlock",
                    "description": "The object to clone",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A shallow clone of the supplied object.",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "RdfaContextScanner",
            "module": "editor-core"
        },
        {
            "file": "node_modules/@lblod/marawa/rdfa-context-scanner.js",
            "line": 502,
            "description": "Returns truethy if the supplied node represents a logical block.\nWe expect to override this as we discover new cases.  In general\nwe check whether there's RDFa defined on the element and/or\nwhether it is a block when rendered in the browser with the\ncurrent style.",
            "itemtype": "method",
            "name": "nodeIsLogicalBlock",
            "params": [
                {
                    "name": "richNode",
                    "description": "Rich node which will be checked",
                    "type": "RichNode"
                }
            ],
            "return": {
                "description": "True iff the node is a logical block",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "RdfaContextScanner",
            "module": "editor-core"
        },
        {
            "file": "node_modules/@lblod/marawa/rdfa-context-scanner.js",
            "line": 530,
            "description": "Whether an element is displayed as a block",
            "itemtype": "method",
            "name": "isDisplayedAsBlock",
            "params": [
                {
                    "name": "richNode",
                    "description": "Node to validate",
                    "type": "RichNode"
                }
            ],
            "return": {
                "description": "true iff the element is displayed as a block",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "RdfaContextScanner",
            "module": "editor-core"
        },
        {
            "file": "node_modules/@lblod/marawa/rdfa-context-scanner.js",
            "line": 560,
            "description": "Shorthand form for creating a new RdfaContextScanner and analysing the supplied node with it.",
            "itemtype": "method",
            "name": "analyse",
            "params": [
                {
                    "name": "node",
                    "description": "Node to be analysed",
                    "type": "Node"
                }
            ],
            "return": {
                "description": "RichNodes containing the analysed node",
                "type": "[RichNode]"
            },
            "class": "RdfaContextScanner",
            "module": "editor-core"
        },
        {
            "file": "node_modules/@lblod/marawa/rdfa-context-scanner.js",
            "line": 575,
            "deprecated": true,
            "class": "RdfaContextScanner",
            "module": "editor-core"
        },
        {
            "file": "node_modules/@lblod/marawa/rdfa-helpers.js",
            "line": 10,
            "description": "Enriches a rich node with semantic properties:\n- rdfaPrefixes: map of prefixes at the current node\n- rdfaAttributes: resolved (non-prefixed) RDFa attributes set on the node\n- rdfaContext: array of rdfaAttributes from the top to the current node",
            "itemtype": "method",
            "name": "enrichWithRdfaProperties",
            "params": [
                {
                    "name": "richNode",
                    "description": "Rich node to expand the RDFa from",
                    "type": "RichNode"
                },
                {
                    "name": "parentContext",
                    "description": "RDFa context (array of rdfaAttributes) of the node's parent",
                    "type": "Array"
                },
                {
                    "name": "parentPrefixes",
                    "description": "RDFa prefixes defined at the node's parent level",
                    "type": "Object"
                }
            ],
            "class": "RichNode",
            "module": "editor-core"
        },
        {
            "file": "node_modules/@lblod/marawa/rdfa-helpers.js",
            "line": 41,
            "description": "Get the RDFa attributes of a DOM node. Null if no RDFa attributes are set.\nSupported RDFa attributes are configured in ./support/rdfa-config",
            "itemtype": "method",
            "name": "getRdfaAttributes",
            "params": [
                {
                    "name": "domNode",
                    "description": "DOM node to get the RDFa attributes from",
                    "type": "Node"
                }
            ],
            "return": {
                "description": "Map of RDFa attributes key-value pairs",
                "type": "Object"
            },
            "class": "RichNode",
            "module": "editor-core"
        },
        {
            "file": "node_modules/@lblod/marawa/rdfa-helpers.js",
            "line": 51,
            "description": "Helpers to process RDFa on DOM nodes",
            "class": "RichNode",
            "module": "editor-core"
        },
        {
            "file": "node_modules/@lblod/marawa/rdfa-helpers.js",
            "line": 81,
            "description": "Create a map of RDFa prefixes by merging an existing map of RDFa prefixes with new RDFa attributes",
            "itemtype": "method",
            "name": "mergePrefixes",
            "params": [
                {
                    "name": "prefixes",
                    "description": "An map of RDFa prefixes",
                    "type": "Object"
                },
                {
                    "name": "rdfAttributes",
                    "description": "An RDFa attributes object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "An new map of RDFa prefixes",
                "type": "Object"
            },
            "class": "RichNode",
            "module": "editor-core"
        },
        {
            "file": "node_modules/@lblod/marawa/rdfa-helpers.js",
            "line": 108,
            "description": "Resolves the URIs in an RDFa attributes object with the correct prefix\nbased on a set of known prefixes.",
            "itemtype": "method",
            "name": "resolvePrefixedAttributes",
            "params": [
                {
                    "name": "rdfaAttributes",
                    "description": "An object of RDFa attributes",
                    "type": "Object"
                },
                {
                    "name": "prefixes",
                    "description": "A map of known prefixes",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A new RDFa attributes object containing resolved URIs",
                "type": "Object"
            },
            "class": "RichNode",
            "module": "editor-core"
        },
        {
            "file": "node_modules/@lblod/marawa/rdfa-helpers.js",
            "line": 127,
            "description": "Resolves a given (array of) URI(s) with the correct prefix (if it's prefixed)\nbased on a set of known prefixes.",
            "itemtype": "method",
            "name": "resolvePrefix",
            "params": [
                {
                    "name": "uri",
                    "description": "An (array of) URI(s) to resolve",
                    "type": "String|Array"
                },
                {
                    "name": "prefixes",
                    "description": "A map of known prefixes",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The resolved URI",
                "type": "String"
            },
            "class": "RichNode",
            "module": "editor-core"
        },
        {
            "file": "node_modules/@lblod/marawa/rdfa-helpers.js",
            "line": 168,
            "description": "Transforms an array of RDFa attribute objects to an array of triples.\nA triple is an object consisting of a subject, predicate and object.",
            "itemtype": "method",
            "name": "rdfaAttributesToTriples",
            "params": [
                {
                    "name": "rdfaAttributes",
                    "description": "An array of RDFa attribute objects",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "An array of triple objects",
                "type": "Array"
            },
            "class": "RichNode",
            "module": "editor-core"
        },
        {
            "file": "node_modules/@lblod/marawa/rdfa-helpers.js",
            "line": 235,
            "description": "Returns whether a given URI is a full URI.",
            "itemtype": "method",
            "name": "isFullUri",
            "params": [
                {
                    "name": "uri",
                    "description": "A URI",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Whether the given URI is a full URI.",
                "type": "Boolean"
            },
            "class": "RichNode",
            "module": "editor-core"
        },
        {
            "file": "node_modules/@lblod/marawa/rdfa-helpers.js",
            "line": 248,
            "description": "Returns whether a given URI is a relative URI.",
            "itemtype": "method",
            "name": "isRelativeUrl",
            "params": [
                {
                    "name": "uri",
                    "description": "A URI",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Whether the given URI is a relative URI.",
                "type": "Boolean"
            },
            "class": "RichNode",
            "module": "editor-core"
        }
    ],
    "warnings": [
        {
            "message": "replacing incorrect tag: function with method",
            "line": " node_modules/@lblod/ember-contenteditable-editor/addon/utils/dom-helpers.js:237"
        },
        {
            "message": "unknown tag: construct",
            "line": " node_modules/@lblod/ember-rdfa-editor/addon/components/load-monitor.js:9"
        },
        {
            "message": "unknown tag: readony",
            "line": " node_modules/@lblod/ember-rdfa-editor/addon/components/load-monitor.js:62"
        },
        {
            "message": "param name missing: {RichNode}",
            "line": " node_modules/@lblod/ember-rdfa-editor/addon/utils/italic-property.js:15"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " node_modules/@lblod/marawa/rdfa-helpers.js:168"
        },
        {
            "message": "Missing item type",
            "line": " node_modules/@lblod/ember-contenteditable-editor/addon/components/content-editable.js:134"
        },
        {
            "message": "Missing item type\nkeyDown events are handled for simple input we take over from\nbrowser input.",
            "line": " node_modules/@lblod/ember-contenteditable-editor/addon/components/content-editable.js:245"
        },
        {
            "message": "Missing item type\ncurrently we disable paste",
            "line": " node_modules/@lblod/ember-contenteditable-editor/addon/components/content-editable.js:284"
        },
        {
            "message": "Missing item type\nkeyUp events are parsed for complex input, for uncaptured events we update\nthe internal state to be inline with reality",
            "line": " node_modules/@lblod/ember-contenteditable-editor/addon/components/content-editable.js:303"
        },
        {
            "message": "Missing item type\ncompositionEnd events are parsed for complex input, for uncaptured events we update\nthe internal state to be inline with reality",
            "line": " node_modules/@lblod/ember-contenteditable-editor/addon/components/content-editable.js:311"
        },
        {
            "message": "Missing item type\nfind defined components, and recreate them",
            "line": " node_modules/@lblod/ember-contenteditable-editor/addon/components/content-editable.js:335"
        },
        {
            "message": "Missing item type\nOPERATION API",
            "line": " node_modules/@lblod/ember-contenteditable-editor/addon/utils/editor/operation.js:3"
        },
        {
            "message": "Missing item type\nReplaces a DOM node\n\nThis raw method replaces a DOM node in a callback.  This allows\nthe raw editor to prepare for the brute change and to alter the\ncontents.  It should be used as a last resort.\n\nCallback is used if the editor can prepare itself for the change.\nfailedCallback is called when the editor cannot execute the\nchange.\n\n- domNode: Node which will be altered\n- callback: Function which should execute the dom node\n  alteration.  This function receives the DOM node which was\n  supplied earlier as a first argument.\n- failedCallback: Function which will be executed if the callback\n  could not be executed.  It receives the dom Node and an\n  explanation as to why the execution could not happen\n- motivation: Obligatory statement explaining why you need\n  replaceDomNode and cannot use one of the other methods.",
            "line": " node_modules/@lblod/ember-contenteditable-editor/addon/utils/editor/operation.js:7"
        },
        {
            "message": "Missing item type\nSELECTION API RESULT\n\nThis is an internal API.  It is subject to change.\n\nThe idea of the selection API is that it yields the nodes on\nwhich changes need to occur with their respective ranges.  This\nmeans that we may return more than one node and that each of the\nnodes might only have a sub-range selected on them.  We also need\nto share sufficient information on the intention of the user, so\nwe can manipulate the contents correctly.\n\nThe resulting entity has a top-level object which describes the\nintention of the user.  Further elements of the selection contain\nthe effectively selected blobs on which we expect the user to\noperate.",
            "line": " node_modules/@lblod/ember-contenteditable-editor/addon/utils/editor/select.js:4"
        },
        {
            "message": "Missing item type\nSelects the current selection, for applying operations to.\nCurrent selection may be a cursor or a range.",
            "line": " node_modules/@lblod/ember-contenteditable-editor/addon/utils/editor/select.js:33"
        },
        {
            "message": "Missing item type\nSelects the highlighted range, or part of it, for applying\noperations to.\n\nWith no arguments, this method selects the full highlighted range\nin order to apply operations to it.  The options hash can be used\nto supply constraints:\n\n- { offset } : Array containing the left offset and right offset.\n  Both need to be positive numbers.  The former is the amount of\n  characters to strip off the left, the latter the amount of\n  characters to strip off the right.\n- TODO { regex } : Regular expression to run against the matching\n  string.  Full matching string is used for manipulation.",
            "line": " node_modules/@lblod/ember-contenteditable-editor/addon/utils/editor/select.js:41"
        },
        {
            "message": "Missing item type\nSelects nodes based on an RDFa context that should be applied.\n\nOptions for scope search default to 'auto'.\n\nOptions for filtering:\n- range: The range object describing the highlighted region.\n- scope:\n  - 'outer': Search from inner range and search for an item\nspanning the full supplied range or more.\n  - 'inner': Search from outer range and search for an item which\nis fully contained in the supplied range.\n  - 'auto': Perform a best effort to find the nodes in which you're\ninterested.\n- property: string of URI or array of URIs containing the property (or properties) which must apply.\n- typeof: string of URI or array of URIs containing the types which must apply.\n- datatype: string of URI containing the datatype which must apply.\n- resource: string of URI containing the resource which must apply.\n- TODO content: string or regular expression of RDFa content.\n- TODO attribute: string or regular expression of attribute available on the node.",
            "line": " node_modules/@lblod/ember-contenteditable-editor/addon/utils/editor/select.js:103"
        },
        {
            "message": "Missing item type\nList of keywords to filter contexts on that can only contain a single value",
            "line": " node_modules/@lblod/ember-contenteditable-editor/addon/utils/editor/select.js:165"
        },
        {
            "message": "Missing item type\nList of keywords to filter contexts on that can be either a single value or an array",
            "line": " node_modules/@lblod/ember-contenteditable-editor/addon/utils/editor/select.js:170"
        },
        {
            "message": "Missing item type\nValidates if the RDFa attributes of a node matches a specifc set of keys",
            "line": " node_modules/@lblod/ember-contenteditable-editor/addon/utils/editor/select.js:175"
        },
        {
            "message": "Missing item type\nValidates if the RDFa context a block matches all filter criteria\nIn case a criteria has multiple values, all values must appear on the same node\n    (TODO context scanner currently only supports multi-value on typeof)\nIn case resource and type are defined, they must appear on the same node\nIn case property and datatype are defined, they must appear on the same node\nIn case resource/typeof and property are defined, property must appear as inner context\n  of the typeof/resource node without any other typeof/resource being defined in between",
            "line": " node_modules/@lblod/ember-contenteditable-editor/addon/utils/editor/select.js:195"
        },
        {
            "message": "Missing item type\nFind rich nodes that strictly fall inside the requested range and match the filter criteria\n\nWe will go over the list of RDFa blocks that strictly fall inside the request range and check whether they\nmatch the requested filter criteria. There is no need to start walking the tree of rich nodes attached to\nthe semanticNode because other RDFa contexts will be represented by another RDFa block in the initial list of blocks.\nIn case 2 matching semantic nodes are nested only the highest (ancestor) node is returned.",
            "line": " node_modules/@lblod/ember-contenteditable-editor/addon/utils/editor/select.js:251"
        },
        {
            "message": "Missing item type\nFind rich nodes that strictly contain the requested range and match the filter criteria\n\nWe will go over the list of RDFa blocks that strictly contain the request range and check whether they\nmatch the requested filter criteria. There is no need to start walking the tree of rich nodes attached to\nthe semanticNode because other RDFa contexts will be represented by another RDFa block in the initial list of blocks.\nIn case 2 matching semantic nodes are nested only the lowest (child) node is returned.",
            "line": " node_modules/@lblod/ember-contenteditable-editor/addon/utils/editor/select.js:292"
        },
        {
            "message": "Missing item type\nAlters a selection from the API described above.\n\nAny selected range can be manipulated.  This method allows such\nchanges to happen on following key terms: property, typeof,\ndataType, resource, content, (TODO: attribute), innerContent,\ninnerHtml\n\n- selection: Object retrieved from #selectContext or\n  #selectHighlight.\n- options: Object specifying desired behaviour.\n- options.remove: Removes RDFa content that was already there.\n    Allows removing any of property, typeof, datatype, resource,\n    content, (TODO: attribute), innerContent, innerHtml\n- options.add: Adds specific content to the selection, pushing\n    nvalues on top of already existing values.  Allows adding any\n    of property, typeof, datatype, resource.  Set the\n    forceNewContext property to true to force a new context if a\n    full tag is selected.\n- options.set: Allows setting any of property, typeof, datatype,\n    resource content attribute innerContent innerHtml.  Set the\n    newContext property to true to force a new context if a full\n    tag is selected.\n- options.desc: You are oncouraged to write a brief description\n    of the desired manipulation here for debugging needs.\n\nThe syntax for specifying items to remove works as follows:\n- true: Removes any value to be removed.\n- string: Removes the specific value as supplied.  If no value\n  matches, nothing is removed.  For semantic content, translation\n  is done based on the current context, eg: if there is a\n  foaf:name in the document, then suppling the string\n  \"http://xmlns.com/foaf/0.1/name\" will usually mean foaf:name is\n  matched.\n- [string]: An array of strings means all the matches will be\n  removed.  Matching works the same way as string.\n- regex: Considers the present value and executes a regular\n  expression on said value.  If the regular expression matches,\n  the value is removed.\n- [regex]: An array of regular experssions.  If any matches, the\n  value itself is matched.\n\nThe syntax for specifying items to add works for all properties\nwhich can be set using \"add\".  Specification works as follows:\n- string: Specifies a single value to set or add.\n- [string]: Specifies a series of values to set or add.\n\nNOTE: The system is free to set or add\nproperties based on a short form (derived from the prefixes\navailable in the context) if it is possible and if it desires to\ndo so.\n\nNOTE: newContext is set to undefined by default and behaves\nsimilar to false.  This is because we assume that when you don't\ncare about the context there's a fair chance that we can merge\nthe contexts.  In specific cases you may desire to have things\nmerge (or not) explicitly.  You should set eithre true or false\nin that case.\n\nNOTE/TODO: In order to make plugins simpler, we should look into\nspecifying namespaces in the plugin.  By sharing these namespaces\nwith these setter methods, it becomes shorter te specify the URLs\nto match on.\n\nNOTE/TODO: It is our intention to allow for multiple operations\nto occur in series.  Altering the range in multiple steps.  This\ncan currently be done by executing the alterSelection multiple\ntimes.  Connecting the changes this way does require you to make\na new selection each time you want to execute a new change.  If\nthis case occurs often *and* we can find sensible defaults on\nupdating the selection, we could make this case simpler.  The\noptions hash would also allow an array in that case.",
            "line": " node_modules/@lblod/ember-contenteditable-editor/addon/utils/editor/update.js:6"
        },
        {
            "message": "Missing item type",
            "line": " node_modules/@lblod/ember-contenteditable-editor/addon/utils/editor/update.js:145"
        },
        {
            "message": "Missing item type",
            "line": " node_modules/@lblod/ember-contenteditable-editor/addon/utils/dom-helpers.js:156"
        },
        {
            "message": "Missing item type\ndefault tag name for creating a property",
            "line": " node_modules/@lblod/ember-contenteditable-editor/addon/utils/editor-property.js:2"
        },
        {
            "message": "Missing item type\nSELECTION AND UPDATING API\n\nSelection and Update API go hand-in-hand.  First make a\nselection, then determine the desired changes on the DOM tree.\nNote that selection and update need to be synchronous.  Do not\nassume that a selection that is made in one runloop can be used\nto update the tree in another.\n\nExamples:\n\nAdd context to highlighted range\n\n    const selection = editor.selectHighlight( range );\n    editor.update( selection, {\n      add: {\n        property: \"http://data.vlaanderen.be/ns/besluit/citeert\",\n        typeof: \"http://data.vlaanderen.be/ns/besluit/Besluit\",\n        innerContent: selection.text // this is somewhat redundant, it's roughly the\n                                     // default case.  in fact, it may drop\n                                     // knowledge so you shouldn't do it unless you\n                                     // need to.\n\n      } } );\n\nAdd type to existing type definition:\n\n    const sel = editor.selectContext( range, { typeof: \"http://data.vlaanderen.be/ns/besluit/Besluit\" } );\n    editor.update( sel, { add: {\n      typeof: \"http://mu.semte.ch/vocabularies/ext/AanstellingsBesluit\",\n      newContext: false } } );\n\nAdd new context below existing type definition:\n\n    const sel = editor.selectContext( range, { typeof: \"http://data.vlaanderen.be/ns/besluit/Besluit\" } );\n    editor.update( sel, { add: {\n      typeof: \"http://mu.semte.ch/vocabularies/ext/AanstellingsBesluit\",\n      newContext: true } } );\n\nAlter the type of some context:\n\n    const sel = editor.selectContext( range, { typeof: \"http://tasks-at-hand.com/ns/metaPoint\" } );\n    editor.update( sel, {\n      remove: { typeof: \"http://tasks-at-hand.com/ns/MetaPoint\" },\n      add: { typeof: [\"http://tasks-at-hand.com/ns/AgendaPoint\", \"http://tasks-at-hand.com/ns/Decesion\"] }\n    } );",
            "line": " node_modules/@lblod/ember-contenteditable-editor/addon/utils/editor.js:5"
        },
        {
            "message": "Missing item type\nYields a truethy value for all events which we can recognise as\nbeing an unimportant key-press which is there to change state.\n\nSkips keyboard events for:\n- Alt\n- Control\n- Meta\n- Shift",
            "line": " node_modules/@lblod/ember-contenteditable-editor/addon/utils/ignore-modifiers-handler.js:13"
        },
        {
            "message": "Missing item type\nThere is no desire to actually handle this event.  Other inputs\nmay choose to also act on this behaviour, hence we allow\npropagation.",
            "line": " node_modules/@lblod/ember-contenteditable-editor/addon/utils/ignore-modifiers-handler.js:27"
        },
        {
            "message": "Missing item type\nHandlers for list action.\n\n- It works only when current node is a textNode\n- The general flow is dependent on two situation types:\n    a. Either the current node is already in al list when this action is fired.\n        (see further notes for wat it basically means 'being in a list')\n    b. Not in a list, create a new list\n\nTODO\n----\n - cursor positonining is uncontrolled right now, after action handled.\n - some times empty textnodes are not included in logicalBlock. Probably an issue with the conditoin isDisplayedAsBlock\n\nIMPLEMENTED BEHAVIOUR\n---------------------\n  The '|' represents the cursor and gives an idea about the currentNode.\n\n Some examples\n\n  case 1\n  ------\n  Call unorderedListAction x 1\n  ```\n  | a some text\n  ```\n  ```\n  <ul>\n    <li>| a some text</li>\n  </ul>\n  ```\n\n  case 2\n  ------\n  Call unorderedListAction x 1\n  ```\n  a some <span> t | ext </span>\n  ```\n  ```\n  <ul>\n    <li>a some <span> t | ext </span></li>\n  </ul>\n  ```\n\n  case 3\n  ------\n  Call indent x 1\n  ```\n   <ul>\n    <li> a some <div> block element text | </div>  other text </li>\n   </ul>\n  ```\n  ```\n   <ul>\n     <li> a some\n       <ul>\n         <li><div> block element text | </div></li>\n       </ul>\n       other text\n     </li>\n   </ul>\n  ```\n\n  case 4\n  ------\n  Call unorderedListAction x 1\n   ```\n   A case |- with br-tag <br> new line. <br> we Will need to refine this.\n   ```\n\n   ```\n   <ul>\n     <li>A case |- with br-tag <br> new line. <br> we Will need to refine this.</li>\n   </ul>\n   ```\n\n  case 6\n  ------\n  Call unorderedListAction or unindent x 1\n  ```\n  <ul>\n    <li> The first </li>\n    <li>| a some text</li>\n    <li> the last </li>\n  </ul>\n  ```\n\n   ```\n  <ul>\n   <li> The first </li>\n  </ul>\n  | a some text\n  <ul>\n    <li> the last </li>\n  </ul>\n   ```\n\n  case 7\n  ------\n  Call unorderedListAction or unindent x 1\n  ```\n  <ul>\n    <li>| a some text</li>\n  </ul>\n  ```\n\n   ```\n   a some <span> t | ext </span>\n   ```\n\n  case 8\n  ------\n  Call unorderedListAction or unindent x 1\n  ```\n   <ul>\n    <li> a | some <div> block element text </div>  other text </li>\n   </ul>\n  ```\n  ```\n   <ul>\n    <li> <div> block element text </div>  other text </li>\n   </ul>\n   a | some\n  ```\n\n  case 9\n  ------\n  Call unorderedListAction or unindent x 1\n  ```\n   <ul>\n     <li> item 1</li>\n    <li>\n      <ul>\n         <li> subitem 1</li>\n         <li> subitem | 2 </li>\n         <li> subitem 3</li>\n      </ul>\n    </li>\n    <li> item 2</li>\n   </ul>\n  ```\n  ```\n   <ul>\n     <li> item 1</li>\n    <li>\n      <ul>\n         <li> subitem 1</li>\n      </ul>\n    </li>\n    <li> subitem | 2 </li>\n    <li>\n      <ul>\n         <li> subitem 3</li>\n      </ul>\n    </li>\n    <li> item 2</li>\n   </ul>\n  ```\n\n  case 10\n  ------\n  Call unorderedListAction or unindent x 1\n\n  ```\n   <ul>\n     <li> item 1</li>\n    <li>\n      <ul>\n         <li> subitem 1</li>\n         <li><div> subitem | 2 </div></li>\n         <li> subitem 3</li>\n      </ul>\n    </li>\n    <li> item 2</li>\n   </ul>\n  ```\n  ```\n   <ul>\n     <li> item 1</li>\n    <li>\n      <ul>\n         <li> subitem 1</li>\n      </ul>\n    </li>\n    <li><div> subitem | 2 </div></li>\n    <li>\n      <ul>\n         <li> subitem 3</li>\n      </ul>\n    </li>\n    <li> item 2</li>\n   </ul>\n  ```\n\n  case 11\n  ------\n  Call unorderedListAction x 1\n\n  ```\n  <ul>\n    <li> The first </li>\n    <li>| a some text</li>\n    <li> the last </li>\n  </ul>\n  ```\n\n  ```\n  <ol>\n    <li> The first </li>\n    <li>| a some text</li>\n    <li> the last </li>\n  </ol>",
            "line": " node_modules/@lblod/ember-contenteditable-editor/addon/utils/list-helpers.js:8"
        },
        {
            "message": "Missing item type\nhandles unordered list",
            "line": " node_modules/@lblod/ember-contenteditable-editor/addon/utils/list-helpers.js:222"
        },
        {
            "message": "Missing item type\nhandles ordered list",
            "line": " node_modules/@lblod/ember-contenteditable-editor/addon/utils/list-helpers.js:235"
        },
        {
            "message": "Missing item type\nhandles indent Action",
            "line": " node_modules/@lblod/ember-contenteditable-editor/addon/utils/list-helpers.js:248"
        },
        {
            "message": "Missing item type\nhandles unindent Action",
            "line": " node_modules/@lblod/ember-contenteditable-editor/addon/utils/list-helpers.js:269"
        },
        {
            "message": "Missing item type\nHELPERS",
            "line": " node_modules/@lblod/ember-contenteditable-editor/addon/utils/list-helpers.js:288"
        },
        {
            "message": "Missing item type\nBoilerplate to handle List action\nBoth for UL and OL",
            "line": " node_modules/@lblod/ember-contenteditable-editor/addon/utils/list-helpers.js:292"
        },
        {
            "message": "Missing item type\nChecks whether node is in a list\n\n  EXAMPLES NOT IN A LIST\n  ----------------------\n\n  ```\n  | a some text\n  ```\n\n   ```\n   a some <span> t | ext </span>\n   ```\n\n  EXAMPLES IN A LIST\n  ------------------\n\n   Note here: when in a nested list context even if cursors is in block element,\n   we return true\n   ```\n   <ul>\n    <li> a some <div> block element text | </div>  other text </li>\n   </ul>\n   ```\n\n  ```\n  <ul>\n    <li> some text\n        <a href=\"#\">an <i> italic | </i> link</a>\n    </li>\n  </ul>\n  ```",
            "line": " node_modules/@lblod/ember-contenteditable-editor/addon/utils/list-helpers.js:315"
        },
        {
            "message": "Missing item type\nInserts a new list.",
            "line": " node_modules/@lblod/ember-contenteditable-editor/addon/utils/list-helpers.js:360"
        },
        {
            "message": "Missing item type\nUnindents logical block contents from context it resides in.",
            "line": " node_modules/@lblod/ember-contenteditable-editor/addon/utils/list-helpers.js:384"
        },
        {
            "message": "Missing item type\nSwitches list type where currentNode is situated in.",
            "line": " node_modules/@lblod/ember-contenteditable-editor/addon/utils/list-helpers.js:458"
        },
        {
            "message": "Missing item type\nWalk up the parents until a blockElement is matched.\nreturn the node of wich the parent is the matching\nblock element\nThis is useful for fetching the span element in following example:\n  ```\n   <p>\n     text <span> foo <a href=\"#\"> current node | </a></span>\n   </p>\n  ```\n The node we return.\n\n ```\n <span> foo <a href=\"#\"> current node | </a></span>\n ```",
            "line": " node_modules/@lblod/ember-contenteditable-editor/addon/utils/list-helpers.js:624"
        },
        {
            "message": "Missing item type\nGiven a node, we want to grow a region (a list of sibling nodes)\nuntil we match a condition",
            "line": " node_modules/@lblod/ember-contenteditable-editor/addon/utils/list-helpers.js:650"
        },
        {
            "message": "Missing item type\nChecks wether node is safe to put a cursor in. Checks either left or right from the node.",
            "line": " node_modules/@lblod/ember-contenteditable-editor/addon/utils/list-helpers.js:719"
        },
        {
            "message": "Missing item type\nMakes sure logicalBlock is cursor safe.\nBy checking the first BlockContentNode as being safe at its left.\nThe last node is checked at its right.\nAdds invisibleWhitespace\nThe inbetween elements are ignored.\n(This function is basically something which should be executed at anthoer level)",
            "line": " node_modules/@lblod/ember-contenteditable-editor/addon/utils/list-helpers.js:751"
        },
        {
            "message": "Missing item type\nAlters a selection from the API described above.\n\nAny selected range can be manipulated.  This method allows such\nchanges to happen on following key terms: property, typeof,\ndataType, resource, content, (TODO: attribute), innerContent,\ninnerHtml\n\n- selection: Object retrieved from #selectContext or\n  #selectHighlight.\n- options: Object specifying desired behaviour.\n- options.remove: Removes RDFa content that was already there.\n    Allows removing any of property, typeof, datatype, resource,\n    content, (TODO: attribute), innerContent, innerHtml\n- options.add: Adds specific content to the selection, pushing\n    nvalues on top of already existing values.  Allows adding any\n    of property, typeof, datatype, resource.  Set the\n    forceNewContext property to true to force a new context if a\n    full tag is selected.\n- options.set: Allows setting any of property, typeof, datatype,\n    resource content attribute innerContent innerHtml.  Set the\n    newContext property to true to force a new context if a full\n    tag is selected.\n- options.desc: You are oncouraged to write a brief description\n    of the desired manipulation here for debugging needs.\n\nThe syntax for specifying items to remove works as follows:\n- true: Removes any value to be removed.\n- string: Removes the specific value as supplied.  If no value\n  matches, nothing is removed.  For semantic content, translation\n  is done based on the current context, eg: if there is a\n  foaf:name in the document, then suppling the string\n  \"http://xmlns.com/foaf/0.1/name\" will usually mean foaf:name is\n  matched.\n- [string]: An array of strings means all the matches will be\n  removed.  Matching works the same way as string.\n- regex: Considers the present value and executes a regular\n  expression on said value.  If the regular expression matches,\n  the value is removed.\n- [regex]: An array of regular experssions.  If any matches, the\n  value itself is matched.\n\nThe syntax for specifying items to add works for all properties\nwhich can be set using \"add\".  Specification works as follows:\n- string: Specifies a single value to set or add.\n- [string]: Specifies a series of values to set or add.\n\nNOTE: The system is free to set or add\nproperties based on a short form (derived from the prefixes\navailable in the context) if it is possible and if it desires to\ndo so.\n\nNOTE: newContext is set to undefined by default and behaves\nsimilar to false.  This is because we assume that when you don't\ncare about the context there's a fair chance that we can merge\nthe contexts.  In specific cases you may desire to have things\nmerge (or not) explicitly.  You should set eithre true or false\nin that case.\n\nNOTE/TODO: In order to make plugins simpler, we should look into\nspecifying namespaces in the plugin.  By sharing these namespaces\nwith these setter methods, it becomes shorter te specify the URLs\nto match on.\n\nNOTE/TODO: It is our intention to allow for multiple operations\nto occur in series.  Altering the range in multiple steps.  This\ncan currently be done by executing the alterSelection multiple\ntimes.  Connecting the changes this way does require you to make\na new selection each time you want to execute a new change.  If\nthis case occurs often *and* we can find sensible defaults on\nupdating the selection, we could make this case simpler.  The\noptions hash would also allow an array in that case.",
            "line": " node_modules/@lblod/ember-contenteditable-editor/addon/utils/pernet-api.js:7"
        },
        {
            "message": "Missing item type",
            "line": " node_modules/@lblod/ember-contenteditable-editor/addon/utils/pernet-api.js:118"
        },
        {
            "message": "Missing item type\nremove a property from a richNode",
            "line": " node_modules/@lblod/ember-contenteditable-editor/addon/utils/property-helpers.js:235"
        },
        {
            "message": "Missing item type\nthe start of the current range\n\nNOTE: this is correctly bound because currentSelection is never\nchanged in place",
            "line": " node_modules/@lblod/ember-contenteditable-editor/addon/utils/raw-editor.js:129"
        },
        {
            "message": "Missing item type\nInforms the consumer that the text was inserted at the given\nposition.\n\nOthers can set it on this component, but we are the only ones to\ncall it.",
            "line": " node_modules/@lblod/ember-contenteditable-editor/addon/utils/raw-editor.js:580"
        },
        {
            "message": "Missing item type\nPernet API\nTODO: remove these methods once plugins switched to the new editor",
            "line": " node_modules/@lblod/ember-contenteditable-editor/addon/utils/raw-editor.js:1102"
        },
        {
            "message": "Missing item type\nThis function executes multiple hints updates as a batch.\nWHY\n---\na. decrease the amount of dead DOMNodes when updating highlights\nb. potential performance gain.\n\nWARNING\n-------\nExperimental, so probably will change",
            "line": " node_modules/@lblod/ember-rdfa-editor/addon/utils/hints-registry.js:279"
        },
        {
            "message": "Missing item type\nsend registry to registry observers",
            "line": " node_modules/@lblod/ember-rdfa-editor/addon/utils/hints-registry.js:652"
        },
        {
            "message": "Missing item type\nBinds a method of an Ember.Object so it can be deeply referenced in\nother components.\n\nWhen would you need this?  When passing functions through to other\ncomponents, you should wrap them in an action helper.  However,\nwhen passing methods this way, their scope is being changed.  The\nmethod will therefore run in a different scope.\n\nExample use:\n\n    Ember.Object.extend( {\n      value: 100,\n      increaseValue: scoped( function(amount) {\n        this.set( 'value', amount + this.value );\n        return this.value;\n      })\n    });\n\nIn a component where this would have value:\n\n    {{something-embedded someReference.thatObject.increaseValue}}",
            "line": " node_modules/@lblod/ember-rdfa-editor/addon/utils/scoped-method.js:3"
        },
        {
            "message": "Missing item type\nCalls JSDOM to create a new DOM tree.\n\nUse dom.window.document.querySelector to get contents from the DOM\ntree.",
            "line": " node_modules/@lblod/marawa/test/helpers.js:4"
        },
        {
            "message": "Missing item type\nMakes it easy to retrieve a parsed DOM element.\n\n- string string The HTML of the element you want returned.  Note\n  that this will be placed inside of a div, hence the elements must\n  be valid within that.\n\n- id string DOM ID of the wrapper element.  Override if this may\n  overlap with the identifiers in your snippet",
            "line": " node_modules/@lblod/marawa/test/helpers.js:14"
        },
        {
            "message": "Missing item type\nCreates a DOM element from the supplied string, using\n#makeDomElement and parses it using #analyse.\n\n- string string HTML string to be turned into DOM and parsed.\n\n- id string DOM ID of the wrapper element.  Override if this may\n  overlap with the identifiers in your snippet",
            "line": " node_modules/@lblod/marawa/test/helpers.js:30"
        },
        {
            "message": "Missing item type\nProcesses a single dom node.",
            "line": " node_modules/@lblod/marawa/node-walker.js:68"
        },
        {
            "message": "Missing item type\nCalled when stepping into a child Dom node",
            "line": " node_modules/@lblod/marawa/node-walker.js:98"
        },
        {
            "message": "Missing item type\nSteps from one (or no) child node to the next.",
            "line": " node_modules/@lblod/marawa/node-walker.js:108"
        },
        {
            "message": "Missing item type\nCalled when finishing the processing of all the child nodes.",
            "line": " node_modules/@lblod/marawa/node-walker.js:126"
        },
        {
            "message": "Missing item type\nProcesses a single rich text node",
            "line": " node_modules/@lblod/marawa/node-walker.js:137"
        },
        {
            "message": "Missing item type\nProcesses a single rich tag",
            "line": " node_modules/@lblod/marawa/node-walker.js:152"
        },
        {
            "message": "Missing item type\nProcesses a void tag node.\n\nCurrently has support for two common types of nodes: IMG and BR.\nThe BR is replaced by a \"\\n\" symbol.  Other tags are currently\nreplaced by a space.\n\nTODO: This code path is experimental.  We know this may cause\nvarious problems and intend to remove it.",
            "line": " node_modules/@lblod/marawa/node-walker.js:180"
        },
        {
            "message": "Missing item type\nProcesses a single comment node",
            "line": " node_modules/@lblod/marawa/node-walker.js:206"
        },
        {
            "message": "Missing item type\nDetects the type of a DOM node",
            "line": " node_modules/@lblod/marawa/node-walker.js:218"
        },
        {
            "message": "Missing item type\nCreates a rich node.\n\nYou can override this method in order to add content to\nthe rich text nodes.",
            "line": " node_modules/@lblod/marawa/node-walker.js:234"
        },
        {
            "message": "Missing item type\nReturns a shallow clone of the supplied object",
            "line": " node_modules/@lblod/marawa/rdfa-context-scanner.js:486"
        },
        {
            "message": "Missing item type",
            "line": " node_modules/@lblod/marawa/rdfa-context-scanner.js:575"
        },
        {
            "message": "Missing item type\nHelpers to process RDFa on DOM nodes",
            "line": " node_modules/@lblod/marawa/rdfa-helpers.js:51"
        }
    ]
}